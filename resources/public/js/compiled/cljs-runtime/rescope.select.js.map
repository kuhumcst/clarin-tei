{"version":3,"sources":["rescope/select.cljs"],"mappings":"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","names":["var_args","args__5774__auto__","len__5768__auto__","i__5769__auto__","argseq__5775__auto__","cljs.core/IndexedSeq","rescope.select/element","seq44923","self__5754__auto__","cljs.core/seq","tags","cljs.core/empty?","cljs.core/vector?","cljs.core.every_pred","cljs.core.comp","cljs.core/set","cljs.core/first","rescope.select/attr","attr","contains-attr?","p__44924","vec__44925","cljs.core.nth","_","m","cljs.core/set?","cljs.core/every?","cljs.core.partial","cljs.core/contains?","cljs.core/map?","cljs.core/second","rescope.select/select-while","seq44929","G__44930","cljs.core/next","G__44931","self__5753__auto__","coll-pred","hiccup","preds","matches?","cljs.core.apply","cljs.core/every-pred","collect","p__44935","vec__44936","coll","node","loc","G__44939","cljs.core/not","cljs.core/reduced","cljs.core.conj","zip-iter","cljs.core/iterate","clojure.zip/next","hickory.zip/hiccup-zip","cljs.core.reduce","cljs.core.take_while","cljs.core/complement","clojure.zip/end?","rescope.select/all","seq44944","G__44945","cljs.core/constantly","rescope.select/one","seq44954","G__44955","p1__44952#","cljs.core/count"],"sourcesContent":["(ns rescope.select\n  \"Select elements in a hiccup tree.\"\n  (:require [clojure.zip :as zip]\n            [hickory.zip :as hzip]))\n\n(defn element\n  \"Create an element selector predicate for element `tags`. Will select elements\n  present in the list of tags. Selects all elements if no tags are specified.\"\n  [& tags]\n  (if (empty? tags)\n    vector?\n    (every-pred vector? (comp (set tags) first))))\n\n(defn attr\n  \"Create an attribute selector predicate based on `attr`. Passing a set as attr\n  will test for the existence of attribute keys, while passing a map will test\n  for matching key-value pairs of attributes.\"\n  [attr]\n  (let [contains-attr? (fn [[_ m]]\n                         (cond\n                           (set? attr) (every? (partial contains? m) attr)\n                           (map? attr) (every? (set m) attr)\n                           :else (contains? m attr)))]\n    (every-pred vector? (comp map? second) contains-attr?)))\n\n(defn select-while\n  \"Select elements satisfying `preds` in a `hiccup` tree while (coll-pred coll)\n  returns logically true.\"\n  [coll-pred hiccup & preds]\n  (let [matches? (apply every-pred vector? preds)\n        collect  (fn [coll [node _ :as loc]]\n                   (cond-> coll\n                     (not (coll-pred coll)) (reduced)\n                     (matches? node) (conj node)))\n        zip-iter (iterate zip/next (hzip/hiccup-zip hiccup))]\n    (reduce collect [] (take-while (complement zip/end?) zip-iter))))\n\n(defn all\n  \"Select all elements satisfying `preds` in a `hiccup` tree. If no predicates\n  are specified, all elements in the hiccup will be returned.\"\n  [hiccup & preds]\n  (apply select-while (constantly true) hiccup preds))\n\n(defn one\n  \"Select the first element satisfying `preds` in a `hiccup` tree.\"\n  [hiccup & preds]\n  (first (apply select-while #(< (count %) 1) hiccup preds)))\n"]}