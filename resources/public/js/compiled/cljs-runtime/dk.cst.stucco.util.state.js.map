{"version":3,"sources":["dk/cst/stucco/util/state.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/int?","cljs.core/any?","cljs.spec.alpha.every_impl","G__39647","cljs.core/coll?","cljs.spec.alpha.tuple_impl","G__39657","cljs.core/number?","G__39658","cljs.spec.alpha/map-spec-impl","G__39659","cljs.core/map?","cljs.core/contains?","G__39660","dk.cst.stucco.util.state/vec-dissoc","coll","n","cljs.core/vec","cljs.core.concat","cljs.core.subvec","dk.cst.stucco.util.state/vec-assoc","v","vec__39663","cljs.core.nth","before","after","cljs.core/split-at","p__39670","map__39671","cljs.core/--destructure-map","cljs.core.get","dk.cst.stucco.util.state/mk-drag-state","kvs","i","cljs.core._EQ_","x__5133__auto__","y__5134__auto__","cljs.core/count","p__39678","map__39679","dk.cst.stucco.util.state/mk-drop-state","kv","cljs.core/meta","x__5130__auto__","y__5131__auto__","js/dk","js/dk.cst","js/dk.cst.stucco","js/dk.cst.stucco.util","js/dk.cst.stucco.util.state","js/dk.cst.stucco.util.state.window","dk.cst.stucco.util.state/window","state","reagent.core.atom","js/window.innerWidth","js/window.onresize","cljs.core.swap_BANG_","cljs.core/assoc","dk.cst.stucco.util.state/assert-valid","spec","js/Error","cljs.core/deref","cljs.spec.alpha.valid_QMARK_","cljs.spec.alpha/explain-str","dk.cst.stucco.util.state/normalize","dk.cst.stucco.util.state/prepare","G__39691","var_args","G__39697","dk.cst.stucco.util.state/ghost","src","kmap","dk.cst.stucco.util.state.ghost","path","reagent.ratom/cursor","small-kmap","cljs.core.into","cljs.core.remove","cljs.core.partial","cljs.core/apply","cljs.core/=","inv-kmap","clojure.set/map-invert","p1__39693#","p2__39692#","reagent.ratom.make_reaction","cljs.core/select-keys","cljs.core/keys","clojure.set/rename-keys","cljs.core.apply","cljs.core/swap!","cljs.core/merge"],"sourcesContent":["(ns dk.cst.stucco.util.state\n  \"Specs describing the shape of all state used in Stucco components.\"\n  (:require [clojure.spec.alpha :as s]\n            [clojure.set :as set]\n            [reagent.ratom :as ratom]\n            [reagent.core :as r])\n  (:refer-clojure :exclude [derive]))\n\n;;;; GENERIC\n\n;; TODO: or pos-int? will require reworking tabs drag/drop code slightly\n(s/def ::i\n  int?)\n\n(s/def ::v\n  any?)\n\n(s/def ::vs\n  (s/coll-of ::v))\n\n(s/def ::kv\n  (s/tuple any? any?))\n\n(s/def ::kvs\n  (s/coll-of ::kv))\n\n\n;;;; SPECIFIC\n\n(s/def ::weight\n  number?)\n\n(s/def ::weights\n  (s/coll-of ::weight))\n\n\n;;;; STATE MAPS\n\n(s/def ::kvs+i\n  (s/keys :req-un [::kvs]\n          :opt-un [::i]))\n\n(s/def ::vs+weights\n  (s/keys :req-un [::vs]\n          :opt-un [::weights]))\n\n(defn vec-dissoc\n  [coll n]\n  (vec (concat (subvec coll 0 n)\n               (subvec coll (inc n)))))\n\n(defn vec-assoc\n  [coll n v]\n  (let [[before after] (split-at n coll)]\n    (vec (concat before [v] after))))\n\n(defn- mk-drag-state\n  [{:keys [kvs i] :or {i 0}} n]\n  {:kvs (vec-dissoc kvs n)\n   :i   (cond\n          (= n i) (min i (- (count kvs) 2))                 ; go right\n          (< n i) (dec i)                                   ; go left\n          (> n i) i)})                                      ; stay in place\n\n(defn- mk-drop-state\n  [{:keys [kvs i] :or {i 0}} n kv]\n  {:kvs (vec-assoc kvs n kv)\n   :i   (cond\n          (:selected? (meta kv)) n                          ; go to dropped kv\n          (= n i) (inc i)                                   ; go right\n          (< n i) (inc i)                                   ; go right\n          (> n i) (max 0 i))})                              ; stay in place\n\n;; TODO: remove entirely if this remains unused\n;; Important global DOM state is held in this singleton state atom. Components\n;; can react directly to window content changes by deref'ing the atom or a\n;; cursor into it. For instance, certain components may need to react to window\n;; resizing events and can so do by deref'ing that value.\n(defonce window\n  (let [state (r/atom {:width js/window.innerWidth})]\n    (set! js/window.onresize #(swap! state assoc :width js/window.innerWidth))\n    state))\n\n(defn assert-valid\n  \"Assert that the current value of `state` conforms to the given `spec`.\"\n  [state spec]\n  (assert (s/valid? spec @state) (s/explain-str spec @state)))\n\n(defn normalize\n  \"Make sure that `state` provided as a plain map can also be dereferenced.\"\n  [state]\n  (if (map? state)\n    (r/atom state)\n    state))\n\n(defn prepare\n  \"Normalize and validate a piece of `state` according to `spec`.\"\n  [spec state]\n  (doto (normalize state)\n    (assert-valid spec)))\n\n(defn ghost\n  \"Create a ghost of existing `src` state and a `kmap` of keys to be renamed.\n  Optionally: provide a `path` to use a cursor rather than the `src` itself.\n\n  The intention of this function is to allow two separate components to share\n  source state while focusing on different aspects of it, e.g. the components\n  might want to share the :i key, while having separate values for :kvs.\"\n  ([src kmap]\n   (ghost src nil kmap))\n  ([src path kmap]\n   (let [state      (if path (ratom/cursor src path) src)\n         small-kmap (into {} (remove (partial apply =) kmap)) ; optimization\n         inv-kmap   (set/map-invert small-kmap)]\n     (ratom/make-reaction\n       #(-> (deref state)\n            (select-keys (keys kmap))\n            (set/rename-keys small-kmap))\n       :on-set #(apply swap! state merge (set/rename-keys %2 inv-kmap))\n       :auto-run true))))\n"]}