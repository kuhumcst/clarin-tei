{"version":3,"sources":["rescope/helpers.cljc"],"mappings":"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","names":["rescope.helpers/as-data-*","attr","cljs.core.into","iter__5522__auto__","s__44978","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5520__auto__","size__5521__auto__","cljs.core/count","b__44980","cljs.core/chunk-buffer","i__44979","vec__44981","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44977","cljs.core/chunk-rest","vec__44984","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","cljs.core.keyword","rescope.util/data-*","p__44987","vec__44988","seq__44989","first__44990","cljs.core/next","rescope.helpers/attr->data-attr","tag","content","node","cljs.core/map?","cljs.core.assoc","p__44995","vec__44996","seq__44997","first__44998","rescope.helpers/rename-attr","kmap","and__5043__auto__","clojure.set/rename-keys","rescope.helpers/add-prefix","prefix","cljs.core/Keyword","cljs.core/name","new-tag","rescope.util/prefixed","p__45007","vec__45008","seq__45009","first__45010","rescope.helpers/meta-into-attr","temp__5802__auto__","m","cljs.core/meta","cljs.core.update","cljs.core/merge","p__45019","map__45022","cljs.core/--destructure-map","cljs.core.get","rescope.helpers/default-fn","attr-kmap","opts","cljs.core/chunk-first"],"sourcesContent":["(ns rescope.helpers\n  \"Helper functions for transforming Hiccup into valid HTML using Cuphic.\"\n  (:require [clojure.set :as set]\n            [rescope.util :as util]))\n\n(defn as-data-*\n  [attr]\n  (into {} (for [[k v] attr]\n             [(keyword (util/data-* k)) v])))\n\n(defn attr->data-attr\n  \"Convert all attributes into data-* attributes.\"\n  [[tag attr & content :as node]]\n  (if (map? attr)\n    (assoc node 1 (as-data-* attr))\n    node))\n\n(defn rename-attr\n  \"Rename attr keys according to `kmap`.\"\n  [kmap [tag attr & content :as node]]\n  (if (and kmap (map? attr))\n    (assoc node 1 (set/rename-keys attr (as-data-* kmap)))\n    node))\n\n(defn add-prefix\n  \"Transform a hiccup vector node `loc` to a valid custom element name by\n  setting a custom `prefix`.\"\n  [prefix node]\n  (if (keyword? (first node))\n    (let [tag     (name (first node))\n          new-tag (keyword (util/prefixed prefix tag))]\n      (assoc node 0 new-tag))\n    node))\n\n(defn meta-into-attr\n  \"Merge the element metadata into the attr. Mimics the behaviour of reagent.\"\n  [[tag attr & content :as node]]\n  (if-let [m (meta node)]\n    (if (map? attr)\n      (update node 1 merge m)\n      (into [tag m] content))\n    node))\n\n(defn default-fn\n  \"Return function applying default transformations based on `opts`.\n\n  This is meant to be used as the :default fn in the final stage of a Cuphic\n  rewrite to ensure that the Hiccup will convert to standards-compliant HTML.\"\n  [{:keys [attr-kmap prefix] :as opts}]\n  (fn [node]\n    (->> node\n         (attr->data-attr)\n         (rename-attr attr-kmap)\n         (add-prefix prefix)\n         (meta-into-attr))))\n"]}