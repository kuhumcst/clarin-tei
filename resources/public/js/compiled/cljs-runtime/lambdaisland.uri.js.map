{"version":3,"sources":["lambdaisland/uri.cljc"],"mappings":"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","names":["lambdaisland.uri/uri-regex","lambdaisland.uri/authority-regex","this__5342__auto__","k__5343__auto__","this__5344__auto__","k44711","else__5345__auto__","G__44769","cljs.core/Keyword","scheme","user","password","host","port","path","query","fragment","cljs.core.get","__extmap","this__5362__auto__","f__5363__auto__","init__5364__auto__","cljs.core.reduce","ret__5365__auto__","p__44781","vec__44782","k__5366__auto__","cljs.core.nth","v__5367__auto__","this__5357__auto__","writer__5358__auto__","opts__5359__auto__","pr-pair__5360__auto__","keyval__5361__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__44710","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5340__auto__","__meta","this__5337__auto__","__hash","this__5346__auto__","cljs.core/count","this__5338__auto__","h__5154__auto__","coll__5339__auto__","cljs.core/hash-unordered-coll","this44712","other44713","cljs.core._EQ_","this__5352__auto__","k__5353__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5349__auto__","G__44825","this__5350__auto__","k__5351__auto__","pred__44841","cljs.core/keyword-identical?","expr__44842","cljs.core.assoc","this__5355__auto__","cljs.core/seq","cljs.core/MapEntry","this__5341__auto__","this__5347__auto__","entry__5348__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","unused__11807__auto__","self__","G__44885","js/Error","args44721","cljs.core/aclone","lambdaisland.uri/URI","this__5388__auto__","cljs.core/List","writer__5389__auto__","cljs.core/-write","G__44717","extmap__5384__auto__","G__44895","cljs.core/record?","lambdaisland.uri/->URI","lambdaisland.uri/map->URI","this","kw","authority-string","G__44739","and__5043__auto__","authority","G__44746","lambdaisland.uri/match-uri","uri","vec__44901","matches","cljs.core/re-matches","_","lambdaisland.uri/match-authority","vec__44908","lambdaisland.uri/parse","vec__44911","vec__44914","lambdaisland.uri/uri","uri-like","lambdaisland.uri/absolute-path?","cljs.core/first","lambdaisland.uri/remove-dot-segments","in","clojure.string.split","out","G__44922","cljs.core/next","cljs.core.conj","cljs.core/vec","cljs.core/butlast","clojure.string.join","lambdaisland.uri/merge-paths","a","b","cljs.core/some","cljs.core/re-find","lambdaisland.uri/join*","base","ref","cljs.core.update","var_args","args__5774__auto__","len__5768__auto__","i__5769__auto__","argseq__5775__auto__","cljs.core/IndexedSeq","lambdaisland.uri/join","seq44928","self__5754__auto__","uris","cljs.core.map","lambdaisland.uri/decode-param-pair","param","vec__44932","k","v","lambdaisland.uri.normalize/percent-decode","clojure.string/replace","G__44941","lambdaisland.uri/query-string->map","p__44942","map__44943","cljs.core/--destructure-map","q","lambdaisland.uri.query_string__GT_map","multikeys","keywordize?","clojure.string/blank?","p__44946","vec__44947","m","cljs.core.keyword","G__44950","cljs.core/conj","G__44953","lambdaisland.uri/query-map","lambdaisland.uri.query_map","u","opts","lambdaisland.uri/query-encode","s","p1__44956#","encode-char","lambdaisland.uri.normalize.percent_encode","lambdaisland.uri.normalize.char_seq","cljs.core.apply","cljs.core/str","lambdaisland.uri/encode-param-pair","cljs.core/simple-ident?","cljs.core/name","cljs.core/qualified-ident?","cljs.core/namespace","lambdaisland.uri/map->query-string","cljs.core.mapcat","p__44963","vec__44964","cljs.core/coll?","cljs.core.partial","cljs.core.interpose","lambdaisland.uri/assoc-query*","cljs.core.merge","lambdaisland.uri/assoc-query","p__44975","map__44976","seq44973","G__44974","self__5753__auto__","kvs","lambdaisland.uri/relative?","lambdaisland.uri/absolute?","cljs.core/complement","lambdaisland.uri/uri?","o","lambdaisland.uri/edn-tag","cljs.core/PROTOCOL_SENTINEL","writer","_opts","cljs.core.write_all","cljs.core.prn_str","lambdaisland.uri/edn-readers"],"sourcesContent":["(ns lambdaisland.uri\n  (:refer-clojure :exclude [uri?])\n  (:require [clojure.string :as str]\n            [lambdaisland.uri.normalize :as normalize])\n  #?(:clj (:import clojure.lang.IFn)))\n\n\n(def uri-regex #?(:clj #\"\\A(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)?(\\?([^#]*))?(#(.*))?\\z\"\n                  :cljs #\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)?(\\?([^#]*))?(#(.*))?$\"))\n(def authority-regex #?(:clj #\"\\A(([^:]*)(:(.*))?@)?([^:]*)(:(\\d*))?\\z\"\n                        :cljs #\"^(([^:]*)(:(.*))?@)?([^:]*)(:(\\d*))?$\"))\n\n(defrecord URI [scheme user password host port path query fragment]\n  IFn\n  (#?(:clj invoke :cljs -invoke) [this kw]\n    (get this kw))\n  Object\n  (toString [this]\n    (let [authority-string (fn [user password host port]\n                             (when host\n                               (cond-> user\n                                 (and user password) (str \":\" password)\n                                 user                (str \"@\")\n                                 true                (str host)\n                                 port                (str \":\" port))))\n          authority (authority-string user password host port)]\n      (cond-> \"\"\n        scheme    (str scheme \":\")\n        authority (str \"//\" authority)\n        true      (str path)\n        query     (str \"?\" query)\n        fragment  (str \"#\" fragment)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; parse\n\n(defn- match-uri [uri]\n  (let [matches (re-matches uri-regex uri)\n        [_ _ scheme _ authority path _ query _ fragment] matches]\n    [scheme authority (when (seq path) path) query fragment]))\n\n(defn- match-authority [authority]\n  (let [matches (re-matches authority-regex authority)\n        [_ _ user _ password host _ port] matches]\n    [user password host port]))\n\n(defn parse\n  \"Parse a URI string into a lambadisland.uri.URI record.\"\n  [uri]\n  (let [[scheme authority path query fragment] (match-uri uri)]\n    (if authority\n      (let [[user password host port] (match-authority authority)]\n        (URI. scheme user password host port path query fragment))\n      (URI. scheme nil nil nil nil path query fragment))))\n\n(defn uri\n  \"Turn the given value into a lambdaisland.uri.URI record, if it isn't one\n  already. Supports String, java.net.URI, and other URI-like objects that return\n  a valid URI string with `str`.\"\n  [uri-like]\n  (if (instance? URI uri-like)\n    uri-like\n    (parse (str uri-like))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; join / resolve\n\n;; This section is based on RFC 3986\n\n(defn- absolute-path? [path]\n  (= (first path) \\/))\n\n(defn- remove-dot-segments\n  \"As per RFC 3986 section 5.2.4\"\n  [path]\n  (when path\n    (loop [in (str/split path #\"(?=/)\")\n           out []]\n      (case (first in)\n        \"/.\" (if (next in)\n               (recur (next in) out)\n               (recur nil (conj out \"/\")))\n        \"/..\" (if (next in)\n                (recur (next in) (vec (butlast out)))\n                (recur nil (conj (vec (butlast out)) \"/\")))\n        nil (str/join out)\n        (recur (next in) (conj out (first in)))))))\n\n(defn- merge-paths [a b]\n  (if (some #{\\/} a)\n    (str (re-find #?(:clj #\"\\A.*/\"\n                     :cljs #\"^.*/\") a) b)\n    (if (absolute-path? b)\n      b\n      (str \"/\" b))))\n\n(defn join*\n  \"Join two URI records as per RFC 3986. Handles relative URIs.\"\n  [base ref]\n  (if (:scheme ref)\n    (update ref :path remove-dot-segments)\n    (-> (if (:host ref)\n          (assoc ref\n                 :scheme (:scheme base)\n                 :query  (:query ref))\n          (if (nil? (:path ref))\n            (assoc base :query (some :query [ref base]))\n            (assoc base :path\n                   (remove-dot-segments\n                    (if (absolute-path? (:path ref))\n                      (:path ref)\n                      (merge-paths (:path base) (:path ref))))\n                   :query (:query ref))))\n        (assoc :fragment (:fragment ref)))))\n\n(defn join\n  \"Joins any number of URIs as per RFC3986. Arguments can be strings, they will\n  be coerced to URI records.\"\n  [& uris]\n  (reduce join* (map uri uris)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Query strings\n\n(defn- decode-param-pair [param]\n  (let [[k v] (str/split param #\"=\")]\n    [(if k (normalize/percent-decode k) \"\")\n     (if v (normalize/percent-decode (str/replace v #\"\\+\" \" \")) \"\")]))\n\n(defn query-string->map\n  \"Parse a query string, consisting of key=value pairs, separated by \\\"&\\\". Takes\n  the following options:\n\n  - `:keywordize?` whether to turn return keys as keywords. Defaults to `true`.\n  - `:multikeys` how to handle the same key occuring multiple times, defaults to\n    `:duplicates`\n\n  The possible values for `:multikeys` are\n\n  - `:never` always return a single value for a key. The rightmost value\n    \\\"wins\\\"\n  - `:always` return a map with vectors as values, with successive\n    values of the same key in order\n  - `:duplicates` return a vector for keys that occur multiple times, or a\n    string otherwise\"\n  ([q]\n   (query-string->map q nil))\n  ([q {:keys [multikeys keywordize?]\n       :or {multikeys :duplicates\n            keywordize? true}}]\n   (when (not (str/blank? q))\n     (->> (str/split q #\"&\")\n          (map decode-param-pair)\n          (reduce\n           (fn [m [k v]]\n             (let [k (if keywordize? (keyword k) k)]\n               (case multikeys\n                 :never\n                 (assoc m k v)\n                 :always\n                 (if (contains? m k)\n                   (update m k conj v)\n                   (assoc m k [v]))\n                 :duplicates\n                 (if (contains? m k)\n                   (if (vector? (m k))\n                     (update m k conj v)\n                     (assoc m k [(m k) v]))\n                   (assoc m k v)))))\n           {})))))\n\n(defn query-map\n  \"Return the query section of a URI as a map. Will coerce its argument\n  with [[uri]]. Takes an options map, see [[query-string->map]] for options.\"\n  ([uri]\n   (query-map uri nil))\n  ([u opts]\n   (query-string->map (:query (uri u)) opts)))\n\n(defn query-encode\n  \"Percent encoding for query strings. Will percent-encode values that are\n  reserved in query strings only. Encodes spaces as +.\"\n  [s]\n  (let [encode-char #(cond\n                       (= \" \" %)\n                       \"+\"\n                       (re-find #\"[^a-zA-Z0-9\\-\\._~@\\/]\" %)\n                       (normalize/percent-encode %)\n                       :else\n                       %)]\n    (->> (normalize/char-seq s)\n         (map encode-char)\n         (apply str))))\n\n(defn- encode-param-pair [k v]\n  (str (query-encode\n        (cond\n          (simple-ident? k)\n          (name k)\n          (qualified-ident? k)\n          (str (namespace k) \"/\" (name k))\n          :else (str k)))\n       \"=\"\n       (query-encode (str v))))\n\n(defn map->query-string\n  \"Convert a map into a query string, consisting of key=value pairs separated by\n  `&`. The result is percent-encoded so it is always safe to use. Keys can be\n  strings or keywords. If values are collections then this results in multiple\n  entries for the same key. `nil` values are ignored. Values are stringified.\"\n  [m]\n  (when (seq m)\n    (->> m\n         (mapcat (fn [[k v]]\n                   (cond\n                     (nil? v)\n                     []\n                     (coll? v)\n                     (map (partial encode-param-pair k) v)\n                     :else\n                     [(encode-param-pair k v)])))\n         (interpose \"&\")\n         (apply str))))\n\n(defn assoc-query*\n  \"Add additional query parameters to a URI. Takes a URI (or coercible to URI) and\n  a map of query params.\"\n  [u m]\n  (let [u (uri u)]\n    (assoc u :query (map->query-string (merge (query-map u) m)))))\n\n(defn assoc-query\n  \"Add additional query parameters to a URI. Takes a URI (or coercible to URI)\n  followed key value pairs.\n\n  (assoc-query \\\"http://example.com?id=1&name=John\\\" :name \\\"Jack\\\" :style \\\"goth\\\")\n  ;;=> #lambdaisland/uri \\\"http://example.com?id=1&name=Jack&style=goth\\\" \"\n  [u & {:as kvs}]\n  (assoc-query* u kvs))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Predicates\n\n(defn relative?\n  \"Is the URI relative? Returns true if the URI does not have a scheme (protocol).\"\n  [uri]\n  (nil? (:scheme uri)))\n\n(def\n  ^{:doc\n    \"Is the URI absolute? Returns true if the URI has a scheme (protocol), and hence also an origin.\"}\n  absolute? (complement relative?))\n\n(defn uri?\n  \"Check if `o` is URI instance.\"\n  [o]\n  (instance? URI o))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; EDN\n\n(def edn-tag 'lambdaisland/uri)\n\n#?(:clj\n   (defmethod print-method URI [^URI this ^java.io.Writer writer]\n     (.write writer \"#\")\n     (.write writer (str edn-tag))\n     (.write writer \" \")\n     (.write writer (prn-str (.toString this))))\n\n   :cljs\n   (extend-type URI\n     IPrintWithWriter\n     (-pr-writer [this writer _opts]\n       (write-all writer \"#\" (str edn-tag) \" \" (prn-str (.toString this))))))\n\n(def\n  ^{:doc\n    \"A map that can be passed to clojure.edn/read, so tagged URI literals are\n     read back correctly.\"}\n  edn-readers {edn-tag parse})\n"]}