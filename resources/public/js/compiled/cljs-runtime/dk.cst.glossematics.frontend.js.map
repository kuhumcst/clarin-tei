{"version":3,"sources":["dk/cst/glossematics/frontend.cljs"],"mappings":"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","names":["p1__33390#","dk.cst.glossematics.frontend/routes","dk.cst.glossematics.frontend.page.main/page","dk.cst.glossematics.frontend.page.encyclopedia/page","cljs.core/deref","cljs.core.prn","dk.cst.glossematics.frontend.state/location","dk.cst.glossematics.frontend.page.user/page","dk.cst.glossematics.frontend.page.search/page","dk.cst.glossematics.frontend.page.search/fetch-results!","dk.cst.glossematics.frontend.page.bibliography/page","dk.cst.glossematics.frontend.page.bibliography/fetch-results!","dk.cst.glossematics.frontend.page.index/page","dk.cst.glossematics.frontend.page.reader/page","dk.cst.glossematics.frontend.page.timeline/page","dk.cst.glossematics.frontend.page.timeline/fetch-timeline-data!","dk.cst.glossematics.frontend/debug-view","fexpr__33392","or__5045__auto__","dk.cst.pedestal.sp.auth/auth-override","dk.cst.pedestal.sp.auth/condition->auth-test","dk.cst.glossematics.frontend.state/assertions","sb__5689__auto__","goog.string/StringBuffer","*print-newline*-orig-val__33393","cljs.core/*print-newline*","*print-fn*-orig-val__33394","cljs.core/*print-fn*","*print-newline*-temp-val__33395","*print-fn*-temp-val__33396","x__5690__auto__","cljs.pprint.pprint","*print-newline*-orig-val__33397","*print-fn*-orig-val__33398","*print-newline*-temp-val__33399","*print-fn*-temp-val__33400","dk.cst.glossematics.frontend.state/db","dk.cst.glossematics.frontend/shell","map__33402","cljs.core/--destructure-map","cljs.core.get","page","name","authenticated?","dk.cst.glossematics.frontend.state/authenticated?","reitit.frontend.easy.href","cljs.core/not","cljs.core._EQ_","dk.cst.glossematics.frontend/universal-prep!","map__33403","name->id","dk.cst.glossematics.frontend.state/search","dk.cst.glossematics.frontend.page.search/fetch-metadata!","p__33405","map__33406","dk.cst.glossematics.frontend/on-navigate","path","query-params","m","old-location","cljs.core.not_EQ_","dk.cst.glossematics.frontend.state/*block-modal-dialogs*","temp__5804__auto__","prep","cljs.core.get_in","cljs.core/reset!","dk.cst.glossematics.frontend/render","reitit.frontend.easy/start!","reitit.frontend.router","reagent.dom.render","js/document.getElementById","dk.cst.glossematics.frontend/init!","time-literals.read-write/print-time-literals-cljs!","style","js/document.createElement","root-style","clojure.string/replace-first","dk.cst.stucco.util.css/shadow-style","js/document.head.appendChild"],"sourcesContent":["(ns dk.cst.glossematics.frontend\n  \"The central namespace of the frontend client; defines frontend routing.\"\n  (:require [clojure.string :as str]\n            [cljs.pprint :refer [pprint]]\n            [reagent.dom :as rdom]\n            [reitit.frontend :as rf]\n            [reitit.frontend.easy :as rfe :refer [href]]\n            [time-literals.read-write :as tl]\n            [dk.cst.stucco.util.css :as css]\n            [dk.cst.pedestal.sp.auth :as sp.auth]\n            [dk.cst.glossematics.frontend.state :as state :refer [db]]\n            [dk.cst.glossematics.frontend.page.main :as main]\n            [dk.cst.glossematics.frontend.page.search :as search]\n            [dk.cst.glossematics.frontend.page.bibliography :as bibliography]\n            [dk.cst.glossematics.frontend.page.index :as index]\n            [dk.cst.glossematics.frontend.page.reader :as reader]\n            [dk.cst.glossematics.frontend.page.user :as user]\n            [dk.cst.glossematics.frontend.page.encyclopedia :as encyclopedia]\n            [dk.cst.glossematics.frontend.page.timeline :as timeline]))\n\n(def routes\n  [[\"/app\"\n    {:name ::main\n     :page main/page}]\n   [\"/app/encyclopedia/:ref\"\n    {:name ::encyclopedia/entry\n     :page encyclopedia/page\n     :prep #(prn 'encyclopedia @state/location)}]\n   [\"/app/user\"\n    {:name ::user/page\n     :page user/page}]\n   [\"/app/search\"\n    {:name ::search/page\n     :page search/page\n     :prep #(search/fetch-results! %)}]\n   [\"/app/bibliography/:author\"\n    {:name ::bibliography/page\n     :page bibliography/page\n     :prep #(bibliography/fetch-results!)}]\n   [\"/app/index/:kind\"\n    {:name ::index/page\n     :page index/page}]\n   [\"/app/reader\"\n    {:name ::reader/preview\n     :page reader/page}]\n   [\"/app/reader/:document\"\n    {:name ::reader/page\n     :page reader/page}]\n   [\"/app/timeline\"\n    {:name ::timeline/page\n     :page timeline/page\n     :prep timeline/fetch-timeline-data!}]])\n\n;; TODO: remove...?\n(defn debug-view\n  []\n  [:details {:style {:opacity \"0.33\"}} [:summary \"DEBUG\"]\n   [:details [:summary \"auth\"]\n    (sp.auth/if-permit [state/assertions {:attrs {\"firstName\" #{\"Simon\"}}}]\n      \"firstName = Simon\"\n      \"firstName != Simon\")]\n   [:details [:summary \"assertions\"]\n    [:pre (with-out-str (pprint state/assertions))]]\n   [:details [:summary \"@db\"]\n    [:pre (with-out-str (pprint @db))]]])\n\n(defn shell\n  \"A container component that wraps the various pages of the app.\"\n  []\n  (let [{:keys [page name]} (:data @state/location)\n        authenticated? @state/authenticated?]\n    [:div.shell {:class (when (get #{::reader/page ::timeline/page} name)\n                          \"reader-mode\")}\n     [:nav\n      [:a {:href (href ::main)}\n       [:h1 \"Glossematics\"]]\n      [:a {:href      (href ::search/page)\n           :title     \"Find documents to read\"\n           :tab-index (if authenticated? \"0\" \"-1\")          ; for accessibility\n           :disabled  (not authenticated?)}\n       \"Find\"]\n      [:a {:href  (href ::timeline/page)\n           :title \"The life Louis Hjelmslev\"}\n       \"Timeline\"]\n      [:a {:href  (href ::bibliography/page {:author \"lh\"})\n           :title \"Relevant works\"}\n       \"Bibl.\"]\n      [:a {:href  (href ::user/page)\n           :title \"Settings\"}\n       [:img.nav-icon {:src \"/images/person-sharp-yellow-svgrepo-com.svg\"\n                       :alt \"\"}]]]\n     [:div.shell__content {:class (when (= name ::timeline/page)\n                                    \"fill-mode\")}\n      (if page\n        [page]\n        [:p \"unknown page\"])]]))\n\n(defn universal-prep!\n  \"Prepare widely needed state.\"\n  []\n  (let [{:keys [name->id]} @state/search]\n    (when-not name->id\n      (search/fetch-metadata!))))\n\n(defn on-navigate\n  [{:keys [path query-params] :as m}]\n  (let [old-location @state/location]\n    ;; Avoid re-fetching/resetting on soft reloads, e.g. by shadow-cljs.\n    (when (or (not= path (:path old-location))\n              (not= query-params (:query-params old-location)))\n      (set! state/*block-modal-dialogs* false)\n      (universal-prep!)\n      (when-let [prep (get-in m [:data :prep])]\n        (prep m)))\n\n    (reset! state/location m)))\n\n(defn ^:dev/after-load render\n  []\n  (rfe/start! (rf/router routes) on-navigate {:use-fragment false})\n  (rdom/render [shell] (js/document.getElementById \"app\")))\n\n(defn init!\n  \"The entry point of the frontend app.\"\n  []\n  ;; Make sure that edn/read-string can process timestamp literals\n  (tl/print-time-literals-cljs!)\n\n  (let [style      (js/document.createElement \"style\")\n        root-style (str/replace-first css/shadow-style \":host\" \":root\")]\n    (set! (.-innerHTML style) root-style)\n    (js/document.head.appendChild style))\n\n  (render))\n"]}