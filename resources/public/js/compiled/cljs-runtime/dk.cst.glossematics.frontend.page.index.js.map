{"version":3,"sources":["dk/cst/glossematics/frontend/page/index.cljs"],"mappings":"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","names":["dk.cst.glossematics.frontend.page.index/str->index-group","s","cljs.core/first","clojure.string/upper-case","dk.cst.glossematics.frontend.shared/str-sort-val","dk.cst.glossematics.frontend.page.index/index-groups","search-metadata","entity-type","entities","cljs.core.get","cljs.core._EQ_","cljs.core.map","p__46014","vec__46015","cljs.core.nth","k","v","k'","dk.cst.glossematics.frontend.shared/surname-first","clojure.string/ends-with?","cljs.core/group-by","cljs.core.comp","cljs.core.remove","cljs.core/nil?","cljs.core.sort_by","cljs.core.into","var_args","args__5774__auto__","len__5768__auto__","i__5769__auto__","argseq__5775__auto__","cljs.core/IndexedSeq","dk.cst.glossematics.frontend.page.index/index-links","p__46020","vec__46021","seq46019","self__5754__auto__","cljs.core/seq","current-type","cljs.core/second","dk.cst.glossematics.static-data/entity-types","p__46028","vec__46029","map__46032","cljs.core/--destructure-map","entity-label","img-src","dk.cst.glossematics.frontend.shared/index-href","cljs.core.interpose","dk.cst.glossematics.frontend.page.index/skip-links","groups","p__46034","vec__46035","letter","fragment","dk.cst.glossematics.frontend.shared/legal-id","dk.cst.glossematics.frontend.shared.find_fragment","cljs.core/vec","dk.cst.glossematics.frontend.page.index/index-content","kvs","iter__5522__auto__","s__46039","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5520__auto__","size__5521__auto__","cljs.core/count","b__46041","cljs.core/chunk-buffer","i__46040","vec__46043","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46038","cljs.core/chunk-rest","vec__46046","cljs.core/cons","cljs.core/rest","dk.cst.glossematics.frontend.shared/search-href","dk.cst.glossematics.frontend.page.index/page","map__46050","cljs.core/deref","map__46051","metadata","dk.cst.glossematics.frontend.state/search","cljs.core.get_in","dk.cst.glossematics.frontend.state/location","cljs.core.keyword","dk.cst.glossematics.frontend.shared/kvs-list","cljs.core/chunk-first"],"sourcesContent":["(ns dk.cst.glossematics.frontend.page.index\n  \"Page containing a range of indices of important entities.\"\n  (:require [clojure.string :as str]\n            [dk.cst.glossematics.static-data :as sd]\n            [dk.cst.glossematics.frontend.shared :as shared]\n            [dk.cst.glossematics.frontend.state :as state]))\n\n(defn str->index-group\n  \"The canonical index group for a given `s`; used for group-by.\"\n  [s]\n  (when s\n    (first (str/upper-case (shared/str-sort-val s)))))\n\n(defn- index-groups\n  [search-metadata entity-type]\n  (let [entities (get search-metadata entity-type)]\n    (->> (if (= entity-type :entity.type/person)\n           (map (fn [[k v]]\n                  (let [k' (shared/surname-first k)]\n                    [(if (str/ends-with? k' \", \") k k') v]))\n                entities)\n           entities)\n         (group-by (comp str->index-group first))\n         (remove (comp nil? first))\n         (sort-by first)\n         (into []))))\n\n(defn index-links\n  [& [current-type]]\n  (->> (sort-by (comp :entity-label second) sd/entity-types)\n       (map (fn [[entity-type {:keys [entity-label img-src]}]]\n              (if (= current-type entity-type)\n                [:span [:img.entity-icon {:src img-src}]\n                 entity-label]\n                [:a {:href     (shared/index-href entity-type)\n                     :disabled (= current-type entity-type)}\n                 [:img.entity-icon {:src img-src}]\n                 entity-label])))\n       (interpose \" / \")\n       (into [:p.index-links])))\n\n(defn skip-links\n  [groups]\n  (into [:p.index-page__skip-links]\n        (->> groups\n             (map (fn [[letter]]\n                    (let [fragment (str \"#\" (shared/legal-id letter))]\n                      [:a {:href     fragment\n                           :on-click #(shared/find-fragment fragment)}\n                       letter])))\n             (interpose \", \")\n             (vec))))\n\n(defn index-content\n  [kvs]\n  [:ul\n   (for [[k v] (sort-by (comp shared/str-sort-val first) kvs)]\n     [:li {:key k}\n      [:a {:href (shared/search-href v)}\n       (str k)]])])\n\n(defn page\n  []\n  (let [{:keys [metadata]} @state/search\n        entity-type (->> (get-in @state/location [:path-params :kind])\n                         (keyword \"entity.type\"))\n        {:keys [entity-label\n                img-src]} (get sd/entity-types entity-type)]\n    [:div.index-page\n     [:h1 [:img {:src img-src}] \" \" entity-label]\n     (when metadata\n       (let [groups (index-groups metadata entity-type)]\n         [:<>\n          [:div.text-content\n           [index-links entity-type]\n           [:hr]\n           [skip-links groups]]\n          ^{:key groups} [shared/kvs-list groups index-content]]))]))\n"]}