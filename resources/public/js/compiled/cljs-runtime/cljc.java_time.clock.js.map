{"version":3,"sources":["cljc/java_time/clock.cljs"],"mappings":";;;;AACA,4BAAA,5BAAmBA,gEAAwGC,qBAAyCC;AAApK,AAA6L,gFAAA,zEAACC,yDAAUC,yEAAuBH,qBAAqBC;;AACpP,8BAAA,9BAAmBG,oEAA0GC,qBAAyCC;AAAtK,AAA+L,gFAAA,zEAACJ,yDAAUC,2EAAyBE,qBAAqBC;;AACxP,kCAAA,lCAAmBC;AAAnB,AAA4E,2CAAA,pCAACC,oBAAUL;;AACvF,2CAAA,3CAAmBM;AAAnB,AAAqF,2CAAA,pCAACD,oBAAUL;;AAChG,6BAAA,7BAAmBO,kEAA2GC,uBAAyCC;AAAvK,AAA8L,gFAAA,zEAACV,yDAAUC,0EAAwBQ,uBAAuBC;;AACxP,oCAAA,pCAAmBC,gFAA6FC;AAAhH,AAAuI,gFAAA,zEAACZ,yDAAUC,gFAA8BW;;AAChL,oCAAA,pCAAmBC,gFAA6FC;AAAhH,AAAuI,gFAAA,zEAACd,yDAAUC,gFAA8Ba;;AAChL,8BAAA,9BAAmBC,oEAA0EC;AAA7F,AAAwG,OAASA;;AACjH,iCAAA,jCAAmBC,0EAA2GC,UAA4BC;AAA1J,AAAiL,OAAWD,mBAAUC;;AACtM,gCAAA,hCAAmBC,wEAAwFC;AAA3G,AAAsH,OAAOA;;AAC7H,iCAAA,jCAAmBC,0EAA4EC;AAA/F,AAA0G,OAAWA;;AACrH,8BAAA,9BAAmBC,oEAAuFC;AAA1G,AAAiI,gFAAA,zEAACzB,yDAAUC,2EAAyBwB;;AACrK,+BAAA,/BAAmBC,sEAAwFC;AAA3G,AAAsH,OAAUA;;AAChI,8BAAA,9BAAmBC,oEAAgGC,UAA4BC;AAA/I,AAAsK,OAASD,iBAAUC","names":["cljc.java-time.clock/tick","java-time-Clock15387","java-time-Duration15388","cljs.core.js_invoke","java.time/Clock","cljc.java-time.clock/offset","java-time-Clock15389","java-time-Duration15390","cljc.java-time.clock/system-utc","cljs.core/js-invoke","cljc.java-time.clock/system-default-zone","cljc.java-time.clock/fixed","java-time-Instant15391","java-time-ZoneId15392","cljc.java-time.clock/tick-minutes","java-time-ZoneId15393","cljc.java-time.clock/tick-seconds","java-time-ZoneId15394","cljc.java-time.clock/millis","this15395","cljc.java-time.clock/with-zone","this15396","java-time-ZoneId15397","cljc.java-time.clock/get-zone","this15398","cljc.java-time.clock/hash-code","this15399","cljc.java-time.clock/system","java-time-ZoneId15400","cljc.java-time.clock/instant","this15401","cljc.java-time.clock/equals","this15402","java-lang-Object15403"],"sourcesContent":["(ns cljc.java-time.clock (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [Clock]]))\n(clojure.core/defn tick {:arglists (quote ([\"java.time.Clock\" \"java.time.Duration\"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock15387 ^js/JSJoda.Duration java-time-Duration15388] (js-invoke java.time.Clock \"tick\" java-time-Clock15387 java-time-Duration15388)))\n(clojure.core/defn offset {:arglists (quote ([\"java.time.Clock\" \"java.time.Duration\"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock15389 ^js/JSJoda.Duration java-time-Duration15390] (js-invoke java.time.Clock \"offset\" java-time-Clock15389 java-time-Duration15390)))\n(clojure.core/defn system-utc {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock \"systemUTC\")))\n(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock \"systemDefaultZone\")))\n(clojure.core/defn fixed {:arglists (quote ([\"java.time.Instant\" \"java.time.ZoneId\"]))} (^js/JSJoda.Clock [^js/JSJoda.Instant java-time-Instant15391 ^js/JSJoda.ZoneId java-time-ZoneId15392] (js-invoke java.time.Clock \"fixed\" java-time-Instant15391 java-time-ZoneId15392)))\n(clojure.core/defn tick-minutes {:arglists (quote ([\"java.time.ZoneId\"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId15393] (js-invoke java.time.Clock \"tickMinutes\" java-time-ZoneId15393)))\n(clojure.core/defn tick-seconds {:arglists (quote ([\"java.time.ZoneId\"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId15394] (js-invoke java.time.Clock \"tickSeconds\" java-time-ZoneId15394)))\n(clojure.core/defn millis {:arglists (quote ([\"java.time.Clock\"]))} (^long [^js/JSJoda.Clock this15395] (.millis this15395)))\n(clojure.core/defn with-zone {:arglists (quote ([\"java.time.Clock\" \"java.time.ZoneId\"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock this15396 ^js/JSJoda.ZoneId java-time-ZoneId15397] (.withZone this15396 java-time-ZoneId15397)))\n(clojure.core/defn get-zone {:arglists (quote ([\"java.time.Clock\"]))} (^js/JSJoda.ZoneId [^js/JSJoda.Clock this15398] (.zone this15398)))\n(clojure.core/defn hash-code {:arglists (quote ([\"java.time.Clock\"]))} (^int [^js/JSJoda.Clock this15399] (.hashCode this15399)))\n(clojure.core/defn system {:arglists (quote ([\"java.time.ZoneId\"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId15400] (js-invoke java.time.Clock \"system\" java-time-ZoneId15400)))\n(clojure.core/defn instant {:arglists (quote ([\"java.time.Clock\"]))} (^js/JSJoda.Instant [^js/JSJoda.Clock this15401] (.instant this15401)))\n(clojure.core/defn equals {:arglists (quote ([\"java.time.Clock\" \"java.lang.Object\"]))} (^boolean [^js/JSJoda.Clock this15402 ^java.lang.Object java-lang-Object15403] (.equals this15402 java-lang-Object15403)))\n"]}