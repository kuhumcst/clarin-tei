{"version":3,"sources":["dk/cst/glossematics/frontend/timeline_widget.cljs"],"mappings":"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","names":["p__32908","map__32909","cljs.core/--destructure-map","cljs.core.get","dk.cst.glossematics.frontend.timeline-widget/prepare-event","isDuration","durationEvent","title","start","event","date","js/Date","defaults","cljs.core/not","or__5045__auto__","date-ks","dates","cljs.core.filter","cljs.core.comp","cljs.core/first","cljs.core.map","p__32910","vec__32911","cljs.core.nth","k","v","cljs.core.assoc","cljs.core.merge","cljs.core.into","dk.cst.glossematics.frontend.timeline-widget/add-events!","event-source","events","p1__32914#","->Event","js/Timeline.DefaultEventSource.Event","cljs.core/clj->js","cljs.core.into_array","dk.cst.glossematics.frontend.timeline-widget/interval-kvs","js/SimileAjax.DateTime.MILLISECOND","js/SimileAjax.DateTime.SECOND","js/SimileAjax.DateTime.MINUTE","js/SimileAjax.DateTime.HOUR","js/SimileAjax.DateTime.DAY","js/SimileAjax.DateTime.WEEK","js/SimileAjax.DateTime.MONTH","js/SimileAjax.DateTime.YEAR","js/SimileAjax.DateTime.DECADE","js/SimileAjax.DateTime.CENTURY","js/SimileAjax.DateTime.MILLENNIUM","dk.cst.glossematics.frontend.timeline-widget/->DateTime","dk.cst.glossematics.frontend.timeline-widget/->Orientation","js/Timeline.HORIZONTAL","js/Timeline.VERTICAL","dk.cst.glossematics.frontend.timeline-widget/->BandInfo","band","js/Timeline.createHotZoneBandInfo","js/Timeline.createBandInfo","p__32916","map__32917","dk.cst.glossematics.frontend.timeline-widget/connect-bands","primary","overview","common","bands","p1__32915#","get-unit","cljs.core.update","G__32918","p__32919","map__32920","dk.cst.glossematics.frontend.timeline-widget/draw-timeline!","orientation","element","opts","band-infos","js/Timeline.create","dk.cst.glossematics.frontend.timeline-widget/ms-count","day","dk.cst.glossematics.frontend.timeline-widget/date-keyfn","ms","ts","cljs.core/quot","p__32921","vec__32922","dk.cst.glossematics.frontend.timeline-widget/busy?","binned-dates","cljs.core/count","p__32925","map__32926","dk.cst.glossematics.frontend.timeline-widget/dates-between","end","end-ts","ticks","cljs.core.conj","dk.cst.glossematics.frontend.timeline-widget/active-dates","cljs.core.concat","cljs.core.remove","cljs.core/nil?","cljs.core.mapcat","cljs.core.partial","p__32927","vec__32928","dk.cst.glossematics.frontend.timeline-widget/hotzone","unit","center-date","busy-date-kv","center-ms","extent-ms","dk.cst.glossematics.frontend.timeline-widget/find-hotzones","size","x__5130__auto__","y__5131__auto__","date-bins","cljs.core/group-by","hotzone-xf","dk.cst.glossematics.frontend.timeline-widget/autoscroll-fn","state","distance","f","js/SimileAjax.Graphics.createAnimation","abs","diff","dk.cst.glossematics.frontend.timeline-widget/on-mouse-up-fn","finish-drag","dk.cst.glossematics.frontend.timeline-widget/timeline","_attr","cljs.core/map?","reagent.core.atom","cljs.core.swap_BANG_","cljs.core/assoc","js/Timeline.DefaultEventSource","reagent.core.create_class","this","map__32931","cljs.core/deref","init-state","reagent.dom/dom-node","new-state","tl","band0","band1","dk.cst.glossematics.frontend.timeline_widget.goog$module$goog$object.set","cljs.core/reset!","cljs.core.atom","attr","_","map__32932","extent","state*","height","temp__5804__auto__","tl*","and__5043__auto__","cljs.core/assoc-in"],"sourcesContent":["(ns dk.cst.glossematics.frontend.timeline-widget\n  \"Wrapper for the Simile Timeline widget. Depends on some ancient JS libs.\"\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [goog.object :as g]))\n\n(defn prepare-event\n  \"Create an event for a timeline event source based on an `event` map.\n  In most cases, :start is the only required key.\n\n    :id          - An internal id. Really shouldn't be used by events.\n                   Timeline library clients should use eventID\n    :eventId     - For use by library client when writing custom painters or\n                   custom fillInfoBubble\n    :start       - Date string.\n    :end         - Date string.\n    :latestStart - Date string.\n    :earliestEnd - Date string.\n    :instant     - Boolean for (non-)precise logic and duration/instant issues.\n    :title/:text - Used as the label on Timelines and in bubbles.\n    :description - Used in bubbles.\n    :image       - Used in bubbles.\n    :link        - Used in bubbles.\n    :icon        - The icon shown on the Timeline.\n    :color       - Timeline label and tape color.\n    :textColor   - Timeline label color, overrides color attribute\n    :hoverText   - [DEPRECATED] Superseded by caption.\n    :caption     - The HTML title attribute of the event.\n    :classname   - The CSS class of the event on the Timeline.\n    :tapeImage   - Sets the background image of the duration event's tape div.\n    :tapeRepeat  - Repeat attribute for tapeImage (repeat, repeat-x, repeat-y).\"\n  [{:keys [isDuration durationEvent title start] :as event}]\n  (let [date     (js/Date. start)\n        defaults {:instant (not (or isDuration durationEvent))\n                  :caption (str (.toLocaleDateString date) \": \" title)}\n        date-ks  #{:start :end :latestStart :earliestEnd}\n        dates    (->> (filter (comp date-ks first) event)\n                      (map (fn [[k v]]\n                             (if (string? v)\n                               [k (js/Date. v)]\n                               [k v]))))]\n    (-> (assoc event :text title)\n        (merge defaults)\n        (into dates))))\n\n(defn add-events!\n  \"Add `events` to a Simile Timeline `event-source`.\"\n  [^js/Timeline.DefaultEventSource event-source events]\n  (let [->Event #(js/Timeline.DefaultEventSource.Event. (clj->js %))]\n    (->> (map (comp ->Event prepare-event) events)\n         (into-array)\n         (.addMany event-source))))\n\n(def interval-kvs\n  \"Sorted order, for dropdowns.\"\n  [[:millisecond js/SimileAjax.DateTime.MILLISECOND]\n   [:second js/SimileAjax.DateTime.SECOND]\n   [:minute js/SimileAjax.DateTime.MINUTE]\n   [:hour js/SimileAjax.DateTime.HOUR]\n   [:day js/SimileAjax.DateTime.DAY]\n   [:week js/SimileAjax.DateTime.WEEK]\n   [:month js/SimileAjax.DateTime.MONTH]\n   [:year js/SimileAjax.DateTime.YEAR]\n   [:decade js/SimileAjax.DateTime.DECADE]\n   [:century js/SimileAjax.DateTime.CENTURY]\n   [:millennium js/SimileAjax.DateTime.MILLENNIUM]])\n\n(def ->DateTime\n  \"Mapping the interval time units described in labeller.js.\"\n  (into {} interval-kvs))\n\n(def ->Orientation\n  \"Mapping the orientatons described in timeline.js.\"\n  {:horizontal js/Timeline.HORIZONTAL\n   :vertical   js/Timeline.VERTICAL})\n\n(defn ->BandInfo\n  \"Create a BandInfo or HotZoneBandInfo from a `band` map.\"\n  [band]\n  (if (:zones band)\n    (js/Timeline.createHotZoneBandInfo (clj->js band))\n    (js/Timeline.createBandInfo (clj->js band))))\n\n(defn connect-bands\n  \"Connect two BandInfos given a `bands` config and an `event-source`.\"\n  [event-source {:keys [primary overview common] :as bands}]\n  (let [get-unit #(get ->DateTime % %)\n        primary  (-> (merge common primary)\n                     (assoc :eventSource event-source)\n                     (update :intervalUnit get-unit))\n        overview (-> (merge common overview)\n                     (assoc\n                       :eventSource event-source\n                       :layout \"overview\")\n                     (update :intervalUnit get-unit))]\n    (array (->BandInfo primary)\n           (doto (->BandInfo overview)\n             (set! -syncWith 0)\n             (set! -highlight true)))))\n\n;; TODO: optimise redrawing (store JS objects as state and reuse)\n(defn draw-timeline!\n  \"Draw a Simile Timeline in the HTML `element` based on `opts`.\"\n  [{:keys [orientation bands event-source element]\n    :or   {orientation :horizontal}\n    :as   opts}]\n  (let [band-infos (connect-bands event-source bands)]\n    (js/Timeline.create element band-infos (->Orientation orientation) nil)))\n\n(def ms-count\n  \"Millisecond counts for various time spans.\"\n  (let [day 86400000]\n    {:millisecond 1\n     :second      1000\n     :minute      60000\n     :hour        (* 60 60000)\n     :day         day\n     :week        (* day 7)\n     :month       (* day 30)\n     :year        (* day 365)\n     :decade      (* day 365 10)\n     :century     (* day 365 100)\n     :millennium  (* day 365 1000)}))\n\n(defn date-keyfn\n  \"Return keyfn to get the closest date through integer division by `ms`.\n  The returned function can be used to group dates when used with 'group-by'.\"\n  [ms]\n  (fn [date]\n    (let [ts (.getTime ^js/Date date)]\n      (js/Date. ^long (- (* (quot ts ms) ms) (/ ms 2))))))\n\n;; TODO: currently just a heuristic, can it be approached more rationally?\n(defn busy?\n  [[k binned-dates]]\n  (> (count binned-dates) 4))\n\n(defn dates-between\n  \"Find dates between :start and :end of `event` with tick of size `ms`.\"\n  [ms {:keys [start end] :as event}]\n  (when end\n    (let [end-ts (.getTime ^js/Date end)]\n      (loop [ts    (+ (.getTime ^js/Date start) ms)\n             ticks []]\n        (if (< ts end-ts)\n          (recur (+ ts ms) (conj ticks (js/Date. ts)))\n          ticks)))))\n\n(defn active-dates\n  \"Get all active dates in `events` based on a tick of size `ms`.\"\n  [ms events]\n  (concat (remove nil? (map :end events))\n          (map :start events)\n          (mapcat (partial dates-between ms) events)))\n\n(defn hotzone\n  \"Define a hotzone of size `ms` based on a `busy-date-kv`.\"\n  [unit ms [center-date dates :as busy-date-kv]]\n  (let [center-ms (.getTime ^js/Date center-date)\n        extent-ms (quot ms 2)]\n    {:start   (js/Date. ^long (- center-ms extent-ms))\n     :end     (js/Date. ^long (+ center-ms extent-ms))\n     :magnify (count dates)\n     :unit    unit}))\n\n(defn find-hotzones\n  \"Find hotzones in timeline `events` based on `size` (:day, :week, ...).\"\n  [size events]\n  (let [ms         (ms-count size)\n        unit       (max (inc (->DateTime size)) (->DateTime :millenium))\n        date-bins  (group-by (date-keyfn ms) (active-dates ms events))\n        hotzone-xf (comp\n                     (filter busy?)\n                     (map (partial hotzone unit ms)))]\n    (into [] hotzone-xf date-bins)))\n\n(defn autoscroll-fn\n  [^js/Timeline._Band band state]\n  (fn [distance f]\n    (.run (js/SimileAjax.Graphics.createAnimation\n            (fn [abs diff] (._moveEther band diff))\n            0\n            distance\n            1000\n            #(when f (f))))))\n\n;; TODO: unfortunately, this interferes with _autoScroll, fix it somehow!\n(defn on-mouse-up-fn\n  [^js/Timeline._Band band state]\n  (let [finish-drag (fn []\n                      (.focus (.-_keyboardInput band))\n                      (._bounceBack band))]\n    (fn []\n      (cond\n        (.-_dragging band)\n        (do (set! (.-_dragging band) false)\n            (finish-drag))\n\n        (.-_orthogonalDragging band)\n        (do (set! (.-_orthogonalDragging band) false)\n            (finish-drag))))))\n\n(defn timeline\n  \"Display events inside a Simile Timeline based on HTML `attr` and `state`.\n  Note that in order for the component to display a height must be set!\n\n  The available state options are:\n\n    :events      - events as Clojure maps (see the prepare-event fn).\n    :bands       - information about the bands (see the connect-bands fn).\n    :orientation - :horizontal or :vertical.\"\n  [_attr state]\n  (let [state (if (map? state)\n                (r/atom state)\n                state)]\n    (swap! state assoc :event-source (js/Timeline.DefaultEventSource.))\n    (r/create-class\n      {:component-did-mount\n       (fn [this]\n         (let [{:keys [event-source events] :as init-state} @state\n               element   (rdom/dom-node this)\n               new-state (assoc init-state :element element)\n               ^js tl    (draw-timeline! new-state)\n               ^js band0 (.getBand tl 0)\n               ^js band1 (.getBand tl 1)]\n           ;; TODO: also react to _onKeyUp _onMouseOut?\n           (g/set band0 \"_autoScroll\" (autoscroll-fn band0 state))\n           (g/set band1 \"_autoScroll\" (autoscroll-fn band1 state))\n           #_(g/set band0 \"_onMouseUp\" (on-mouse-up-fn band0 state))\n           #_(g/set band1 \"_onMouseUp\" (on-mouse-up-fn band1 state))\n           (add-events! event-source events)\n           (reset! state (assoc new-state :tl (atom tl)))))\n\n       :reagent-render\n       (fn [attr _]\n         (let [{:keys [tl extent] :as state*} @state\n               height (max extent (-> attr :style :height))]\n           (when-let [tl* (and tl @tl)]\n             ;; Preserve scroll state of timeline when redrawing.\n             (let [band0 (.getBand ^js tl* 0)\n                   date  (.getCenterVisibleDate ^js band0)]\n               (swap! state assoc-in [:bands :common :date] date)))\n           [:div (assoc-in attr [:style :height] height)]))})))\n"]}