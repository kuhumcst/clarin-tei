{"version":3,"sources":["dk/cst/stucco/pattern.cljs"],"mappings":";AAoBA,kCAAA,lCAAOA,4EACJC,UAAUC;AADb,AAEE,+DAAA,XAAKD,2DAAcC;;AAErB,wCAAA,xCAAOC,wFACJF,UAAUC;AADb,AAEE,+DAAA,XAAKD,oEAAuBC;;AAE9B,2CAAA,mFAAA,0BAAA,0BAAA,lLAAKE;AAKL;;;uCAAA,vCAAMC,sFAEHC,YAAYJ,EAAEK;AAFjB,AAGE,+EAAA,mFAAA,uDAAA,lNAACC,kDAAUD,GAAGE,sOAA8B,AAACC,4CAAIJ,YAAYJ;;AAE/D,AAAA;;;qCAAA,6CAAAS,lFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAMD,8EAEFE;AAFJ,AAGG,OAACC,iEAAaD,IAAIE;;;AAHrB,CAAA,mEAAA,nEAAMJ,8EAIFE,IAAIG;AAJR,AAKG,IAAMZ,cAAgB,AAACa,gBAAM,CAACD,yCAAAA,mFAAAA,5CAASd,+DAAAA;IACjCgB,8BAAgB,AAACC,gDAAQhB,qCAAeC;AAD9C,AAEE,OAACgB,6CAAK,AAACC,gBAAMR,KAAK,AAACS,oDAAYJ,4BAAgBL;;;AAPpD,CAAA,mEAAA,nEAAMF,8EAQFE,IAAIG,SAASZ;AARjB,AASG,IAAMA,kBAAgB,AAACa,gBAAM,CAACD,yCAAAA,sDAAAA,fAASZ,kCAAAA;IACjCc,8BAAgB,AAACC,gDAAQhB,qCAAeC;AAD9C,AAEE,OAACgB,6CAAK,AAACC,gBAAMR,KAAK,AAACS,oDAAYJ,4BAAgBL;;;AAXpD,CAAA,6DAAA,7DAAMF;;AAAN,AAgBA;;;iCAAA,yCAAAY,SAAAC,nFAAOK;AAAP,AAAA,IAAAJ,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;YAAAA,RAEsBM;UAFtB,AAAAJ,4CAAAF,eAAA,jEAEWZ;QAFX,AAAAc,4CAAAF,eAAA,/DAEeK;IAFfF,aAAAJ;IAAAI,iBAAA,AAAAF,4BAAAE;WAAAA,PAGmBK;SAHnB,AAAAN,4CAAAC,eAAA,hEAGWI;AAHX,AAIE,4CAAA,5CAACE,sCAAmBH;;AACpB,IAAAI,aAAA,AAAAC,gBAAiCL;IAAjCI,iBAAA,AAAAT,4BAAAS;cAAA,AAAAR,4CAAAQ,eAAA,rEAActB;YAAd,AAAAc,4CAAAQ,eAAA,gDAAA,nHAAkBL;IACZO,WAAS,AAACpC,sCAAgB+B,GAAGF;IAC7BQ,SAAS,AAACC,gBAAM1B;IAChB2B,SAAS,WAAKnC;AAAL,AAGE,GAAI,AAACoC,6CAAET,GAAG,AAAA,gFAAK,AAACU,eAAKrC;AACnB,OAACsC,mDAAMZ,MAAMa,uCAAoB,UAAA,TAAKN,cAAQjC;;AAC9C,OAACsC,mDAAMZ,MAAMa,uCAAoBN,OAAOjC;;;AAR3D,AAAA,0FAAA,sEAAA,2CAAA,qDAAA,UAAA,gEAAA,0BAAA,qDAAA,uHAAA,6GAAA,wGAAA,4GAAA,3bAWiC2B,uEACAa,2HACAC,yGACAC,2GACAC,gGACA,AAACC,+BAAaT,gBAC5C,iBAAAU,qBAAA,uDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA+3E8C,AAAAwF,sBAAA7F;IA/3E9CM,qBAAA,AAAAlB,gBAAAiB;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,QAAA,AAAAI,eAAAL,gBAAAI,nCAAM5D;AAAN,AAAA,IAAA8D,aACyB,AAACtD,4CAAIK,QAAIb;QADlC,AAAAQ,4CAAAsD,WAAA,IAAA,/DACaW;QADb,AAAAjE,4CAAAsD,WAAA,IAAA,/DACeY;SADfZ,LACqBzD;IACTsE,kBAAU,AAAClC,6CAAEzC,EAAE8B;IACf8C,SAAU,AAAC9E,gCAAUkC,GAAGhC;IACxB6E,YAAU,AAAC5E,sCAAgB+B,GAAGhC;IAC9B8E,UAAU;;AAAA,AACE,AAACnC,mDAAMZ,MAAMgD,uCAAoB/E;;AACjC,4EAAA,qDAAA,1HAACM,kDAAUD,GAAG2E,kEACChD,kEACO2C;;;IAClCM,SAAU;kBAAK5E;AAAL,AACE,OAACsC,mDAAMZ,MAAMa,uCAAoB5C,EAAEK;;;IAC/C6E,SAAU;;AAAA,AACE,gFAAA,zEAACvC,mDAAMZ,MAAMiD,gEAAShF;;;AAb9C,AAAA,AAAA,AAAA+D,uBAAAL,SAAA,mFAAA,4DAAA,wCAAA,qDAAA,8DAAA,oDAAA,mDAAA,2DAAA,wEAAA,6DAAA,uDAAA,uEAAA,sEAAA,+DAAA,kDAAA,wEAAA,iEAAA,oEAAA,gEAAA,uEAAA,oEAAA,gcAAA,7ZAgB6B,eAAA,fAACyB,kGAAMtE,QAAIiB,MAAE9B,kTACb4E,vSACAQ,4FACA,AAAA,qFAAQ,AAAC1C,eAAKrC,4RACdsE,hZACAtC,2TACA,CAAA,+DAAwB,KAAA,JAAKrC,hmBAC7B,mBAAA,IAAA,rBAAI2E,yeACJA,9PACAO,qJAEA,AAACG,qCAAmBP,QAAOD,qNAC3BS,9LACAxC,qDACAC,9JACAC,hKACA,AAACC,+BAAagC,6cACxCR;;AAjCH,eAAA,CAAAb,WAAA;;;;AAAA;;;;;AAAA,OAAAI,qBAAA,AAAAC,gBAAAP,UAAA,AAAAQ,6CAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAP,UAAA;;;AAAA,QAAA,AAAAU,gBAAAjB,pBAAMnD;AAAN,AAAA,IAAAqE,aACyB,AAAC7D,4CAAIK,QAAIb;QADlC,AAAAQ,4CAAA6D,WAAA,IAAA,/DACaI;QADb,AAAAjE,4CAAA6D,WAAA,IAAA,/DACeK;SADfL,LACqBhE;IACTsE,kBAAU,AAAClC,6CAAEzC,EAAE8B;IACf8C,SAAU,AAAC9E,gCAAUkC,GAAGhC;IACxB6E,YAAU,AAAC5E,sCAAgB+B,GAAGhC;IAC9B8E,UAAU;;AAAA,AACE,AAACnC,mDAAMZ,MAAMgD,uCAAoB/E;;AACjC,4EAAA,qDAAA,1HAACM,kDAAUD,GAAG2E,kEACChD,kEACO2C;;;IAClCM,SAAU;kBAAK5E;AAAL,AACE,OAACsC,mDAAMZ,MAAMa,uCAAoB5C,EAAEK;;;IAC/C6E,SAAU;;AAAA,AACE,gFAAA,zEAACvC,mDAAMZ,MAAMiD,gEAAShF;;;AAb9C,AAAA,OAAAsE,eAAA,mFAAA,4DAAA,wCAAA,qDAAA,8DAAA,oDAAA,mDAAA,2DAAA,wEAAA,6DAAA,uDAAA,uEAAA,sEAAA,+DAAA,kDAAA,wEAAA,iEAAA,oEAAA,gEAAA,uEAAA,oEAAA,gcAAA,yPAAA,AAAAJ,6CAAA,AAAAK,eAAApB,ltBAgB6B,eAAA,fAACgC,kGAAMtE,QAAIiB,MAAE9B,kTACb4E,vSACAQ,4FACA,AAAA,qFAAQ,AAAC1C,eAAKrC,4RACdsE,hZACAtC,2TACA,CAAA,+DAAwB,KAAA,JAAKrC,hmBAC7B,mBAAA,IAAA,rBAAI2E,yeACJA,9PACAO,qJAEA,AAACG,qCAAmBP,QAAOD,qNAC3BS,9LACAxC,qDACAC,9JACAC,hKACA,AAACC,+BAAagC,6cACxCR;;;AAjCH;;;;GAAA,KAAA;;AAAA,AAAA,OAAAvB,mBAAQ,AAACsB,8CAAMlC;;;AAmCpB;;;kCAAA,0CAAAiD,SAAAC,rFAAOG;AAAP,AAAA,IAAAF,aAAAF;IAAAE,iBAAA,AAAA/D,4BAAA+D;YAAAA,RAEsB1D;UAFtB,AAAAJ,4CAAA8D,eAAA,jEAEW5E;QAFX,AAAAc,4CAAA8D,eAAA,/DAEe3D;IAFf4D,aAAAF;IAAAE,iBAAA,AAAAhE,4BAAAgE;WAAAA,PAGmBzD;SAHnB,AAAAN,4CAAA+D,eAAA,hEAGW1D;AAHX,AAIE,4CAAA,5CAACE,sCAAmBH;;AACpB,IAAA6D,aAAA,AAAAxD,gBAAiCL;IAAjC6D,iBAAA,AAAAlE,4BAAAkE;cAAA,AAAAjE,4CAAAiE,eAAA,rEAAc/E;YAAd,AAAAc,4CAAAiE,eAAA,gDAAA,nHAAkB9D;IAAlB+D,aACmB,gDAAA,2DAAA,zFAAM,AAACE,oBAAUlF,UACf,AAACL,4CAAIK,QAAIiB;QAF9B,AAAAtB,4CAAAqF,WAAA,IAAA,/DACOnB;QADP,AAAAlE,4CAAAqF,WAAA,IAAA,/DACSC;SADTD,LACexF;AADf,AAGE,oBAAMyF;AAAN,AAAA,0FAAA,8EAAA,2CAAA,qDAAA,WAAA,kGAAA,qHAAA,rKAEwC,AAAC7F,sCAAgB+B,GAAGF,kFACpB,AAAChC,gCAAUkC,GAAGF,8DACd,AAAA,qFAAQ,AAACY,eAAKrC,aACnDyF;;AALH;;;AAOJ;;;;;;;;;;;;;6BAAA,qCAAAE,SAAAC,3EAAMG;AAAN,AAAA,IAAAF,aAAAF;IAAAE,iBAAA,AAAAxE,4BAAAwE;YAAAA,RAYsBnE;UAZtB,AAAAJ,4CAAAuE,eAAA,jEAYWrF;QAZX,AAAAc,4CAAAuE,eAAA,/DAYepE;IAZfqE,aAAAF;IAAAE,iBAAA,AAAAzE,4BAAAyE;WAAAA,PAamBlE;SAbnB,AAAAN,4CAAAwE,eAAA,hEAaWnE;AAbX,AAcE,IAAMD,YAAM,iCAAA,jCAACsE,sIAA4BtE;IACnCE,WAAM,mDAAA,nDAACqE,8CAAMrE,uDAAS,iBAAAsE,mBAAIvE;AAAJ,AAAA,oBAAAuE;AAAAA;;AAAO,OAACC;;;AADpC,AAEE,kBAAK9B,EAAEA;AAAP,AAAA,0FAAA,qEAAA,6IAAA,1DAEI7C,+BAASE,UAAME,oGACf0D,gCAAU5D,UAAME;;;AAMxB;;;;;;;;;;;;;;iCAAA,yCAAAwE,SAAAC,nFAAMG;AAAN,AAAA,IAAAF,aAAAF;IAAAE,iBAAA,AAAAjF,4BAAAiF;YAAAA,RAasB5E;UAbtB,AAAAJ,4CAAAgF,eAAA,jEAaW9F;QAbX,AAAAc,4CAAAgF,eAAA,/DAae7E;IAbf8E,aAAAF;IAAAE,iBAAA,AAAAlF,4BAAAkF;WAAAA,PAgBU3E;iBAhBV,AAAAN,4CAAAiF,eAAA,xEAcWE;sBAdX,AAAAnF,4CAAAiF,eAAA,7EAeWG;AAfX,AAiBE,IAAAC,gBAAA,AAAAC,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAF,6BAAA,AAAAI;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAR,2BAAA,AAAAI;;;AAAA,IAAAK,YAAA,CAAA,AAAAT,yBAAA;gBAAA,EAAA,EAAAS,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,qJAAA,CAAAA,cAAA,tQAAajF,yGAAW,iCAAA,jCAACsE,sIAA4BtE;iBAArD,EAAA,EAAA0F,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,OAAA,1GACaY;AADb,AACyB,qFAAA,9EAACjF,mDAAMZ,UAAM8F,iEAAUC;IADhD,CAAAd,cAAA;iBAAA,EAAA,EAAAS,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,OAAA,1GAEae;AAFb,AAEyB,qFAAA,9EAACpF,mDAAMZ,UAAM8F,iEAAUG;IAFhD,CAAAhB,cAAA;IAAAW,WAAA,AAGE,iBAAAM,aAAA,AAAA7F,gBAAuBL;IAAvBkG,iBAAA,AAAAvG,4BAAAuG;YAAA,AAAAtG,4CAAAsG,eAAA,nEAAcnG;cAAd,AAAAH,4CAAAsG,eAAA,rEAAgBpH;IACVsH,SAAa,AAACC,4CAAI,6CAAA,7CAACC,oGAAY3F,gBAAM7B;IAD3CqH,aAEsB,AAAC1H,4CAAIK,QAAIiB;YAF/B,AAAAtB,4CAAA0H,WAAA,IAAA,nEAEOI;cAFP,AAAA9H,4CAAA0H,WAAA,IAAA,rEAEaK;IACPC,eAAa,AAAChC;IACdiC,WAAa,AAACjC;IACdkC,cAAa,SAAA,RAAG5G;IAChB6G,cAAa,CAAG7G,QAAE,4BAAA,3BAAK,AAACS,gBAAM1B;AANpC,AAAA,0FAAA,qEAAA,2CAAA,qDAAA,QAAA,oFAAA,WAAA,2EAAA,mGAAA,mFAAA,2FAAA,2CAAA,mJAAA,uFAAA,6FAAA,8IAAA,mFAAA,kFAAA,2CAAA,qDAAA,WAAA,+DAAA,oFAAA,yHAAA,mFAAA,iGAAA,mFAAA,+FAAA,2CAAA,zsDAawCiG,sFACAC,iTACE,CAAA,iEAA0BjF,+EAC1B,eAAA,IAAA,jBAAI4G,oFACJ,eAAA,WAAA,xBAAMA,aAAMX,wEACZ,iEAAA,jEAACvH,4CAAI2H,OAAO,SAAA,RAAKrG,qWAEhB0G,wFACAC,gEACA,AAACjI,4CAAI2H,OAAOrG,kdAEjB2G,iBAAUH,cAC3C,oCAAA,lCAAM,4BAAA,3BAAG,AAAC/F,gBAAM1B,iBACd,6CAAA,mFAAA,4EAAA,2CAAA,qDAAA,UAAA,uHAAA,gEAAA,7eAACO,0XACsCyB,+JAEjC,iBAAAK,qBAAA,uDAAA0F;AAAA,AAAA,YAAAxF,kBAAA,KAAA;AAAA,AAAA,IAAAwF,eAAAA;;AAAA,AAAA,IAAAvF,qBAAA,AAAAC,cAAAsF;AAAA,AAAA,GAAAvF;AAAA,AAAA,IAAAuF,eAAAvF;AAAA,AAAA,GAAA,AAAAE,6BAAAqF;AAAA,IAAApF,kBAmwEkC,AAAAwF,sBAAAJ;IAnwElCnF,qBAAA,AAAAlB,gBAAAiB;IAAAqF,WAAA,AAAAlF,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAqF,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAArF;AAAA,QAAA,AAAAI,eAAAL,gBAAAsF,nCAAM9I;AAAN,AAAA,IACY2E,kBAAU,AAAClC,6CAAEzC,EAAE8B;aAD3B,TAEYoD;;AAFZ,AAEuB,oFAAA,7EAACvC,mDAAMZ,UAAMiD,gEAAShF;;;AAF7C,AAAA,AAAA,AAAA+D,uBAAA8E,SAAA,mFAAA,uFAAA,2CAAA,qDAAA,MAAA,qFAAA,uFAAA,2FAAA,/LAI2CL,oFACA7D,8EACA,mBAAA,IAAA,rBAAIA,wFAGJO;;AAT3C,eAAA,CAAA4D,WAAA;;;;AAAA;;;;;AAAA,OAAA9E,qBAAA,AAAAC,gBAAA4E,UAAA,AAAAE,6CAAA,AAAA5E,qBAAAyE;;AAAA,OAAA5E,qBAAA,AAAAC,gBAAA4E,UAAA;;;AAAA,QAAA,AAAAzE,gBAAAwE,pBAAM5I;AAAN,AAAA,IACY2E,kBAAU,AAAClC,6CAAEzC,EAAE8B;aAD3B,TAEYoD;;AAFZ,AAEuB,oFAAA,7EAACvC,mDAAMZ,UAAMiD,gEAAShF;;;AAF7C,AAAA,OAAAsE,eAAA,mFAAA,uFAAA,2CAAA,qDAAA,MAAA,qFAAA,uFAAA,2FAAA,oFAAA,AAAAyE,6CAAA,AAAAxE,eAAAqE,/UAI2CJ,oFACA7D,8EACA,mBAAA,IAAA,rBAAIA,wFAGJO;;;AAT3C;;;;GAAA,KAAA;;AAAA,AAAA,OAAAhC,mBAAQ,AAACsB,8CAAM,AAACjC,gBAAM1B;oBA7BnC,mFAAA,gIAAA,mFAAA,2FAAA,2CAAA,2JAAA,uFAAA,6FAAA,zwBAyBK,iNAeD0H,ySACsC,CAAA,iEAA0B,SAAA,RAAKzG,sFAC/B,eAAA,IAAA,jBAAI6G,oFACJ,eAAA,WAAA,xBAAMA,aAAMf,wEACZ,iEAAA,jEAACpH,4CAAI2H,OAAO,SAAA,RAAKrG;;AA/C7D,AAAA6F","names":["dk.cst.stucco.pattern/mk-tab-id","parent-id","n","dk.cst.stucco.pattern/mk-tab-panel-id","dk.cst.stucco.pattern/background-colours","dk.cst.stucco.pattern/add-background","backgrounds","kv","cljs.core.vary_meta","cljs.core/assoc-in","cljs.core.nth","var_args","G__39802","dk.cst.stucco.pattern/heterostyled","js/Error","kvs","dk.cst.stucco.pattern.heterostyled","cljs.core/identity","order-fn","cljs.core/cycle","add-background'","cljs.core.partial","cljs.core.into","cljs.core/empty","cljs.core.map_indexed","p__39814","p__39815","map__39816","cljs.core/--destructure-map","cljs.core.get","map__39817","dk.cst.stucco.pattern/tab-list","i","state","id","opts","dk.cst.stucco.util.state/assert-valid","map__39820","cljs.core/deref","panel-id","length","cljs.core/count","append","cljs.core._EQ_","cljs.core/meta","cljs.core.swap_BANG_","dk.cst.stucco.util.state/mk-drop-state","dk.cst.stucco.dom.keyboard/roving-tabindex-handler","dk.cst.stucco.dom.drag/on-drag-enter","dk.cst.stucco.dom.drag/on-drag-over","dk.cst.stucco.dom.drag/on-drag-leave","dk.cst.stucco.dom.drag/on-drop","iter__5522__auto__","s__39825","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5520__auto__","size__5521__auto__","b__39827","cljs.core/chunk-buffer","i__39826","cljs.core/-nth","vec__39828","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39824","cljs.core/chunk-rest","cljs.core/first","vec__39839","cljs.core/cons","cljs.core/rest","cljs.core.range","k","_","selected?","tab-id","source-id","delete","dk.cst.stucco.util.state/mk-drag-state","cljs.core/assoc","insert","select","cljs.core/hash","dk.cst.stucco.dom.focus/accept!","dk.cst.stucco.dom.drag/on-drag-start","dk.cst.stucco.dom.drag/on-drag-end","p__39855","p__39856","map__39857","map__39858","dk.cst.stucco.pattern/tab-panel","map__39860","vec__39861","v","cljs.core/not-empty","p__39869","p__39870","map__39872","map__39873","dk.cst.stucco.pattern/tabs","dk.cst.stucco.util.state/prepare","cljs.core.assoc","or__5045__auto__","cljs.core/random-uuid","p__39891","p__39892","map__39894","map__39895","dk.cst.stucco.pattern/carousel","aria-label","aria-labelledby","with-let39898","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__36614__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init39899","cljs.core/not","res39900","next-slide","cljs.core/update","cljs.core/inc","prev-slide","cljs.core/dec","map__39910","vec__39911","styles","cljs.core.map","cljs.core.comp","label","content","tab-panel-id","label-id","prev?","next?","s__39915","b__39917","i__39916","iter__39914","cljs.core/chunk-first"],"sourcesContent":["(ns dk.cst.stucco.pattern\n  \"Reagent component implementations of common WAI-ARIA patterns.\n\n  These components try to match the WAI-ARIA example patterns as closely as\n  possible. The implementations include common interface elements such as\n  carousels and tabbed panels.  Ideally, these comprise the second (or a lower)\n  level in a layout, with the top level composed of WAI-ARIA landmarks\n  (available in the 'dk.cst.stucco.landmark' namespace).\n\n  For looser groupings, take a look at the 'dk.cst.stucco.group' namespace.\n\n  ARIA references:\n    https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex\"\n  (:require [reagent.core :as r]\n            [dk.cst.stucco.util.state :as state]\n            [dk.cst.stucco.dom.keyboard :as kbd]\n            [dk.cst.stucco.dom.focus :as focus]\n            [dk.cst.stucco.dom.drag :as drag]))\n\n;;;; TABS\n(defn- mk-tab-id\n  [parent-id n]\n  (str parent-id \"-\" n))\n\n(defn- mk-tab-panel-id\n  [parent-id n]\n  (str parent-id \"-tabpanel-\" n))\n\n(def background-colours\n  [\"var(--tab-background-1)\"\n   \"var(--tab-background-2)\"\n   \"var(--tab-background-3)\"])\n\n(defn add-background\n  \"Annotate background `n` of `backgrounds` in the metadata of `kv`.\"\n  [backgrounds n kv]\n  (vary-meta kv assoc-in [:style :background] (nth backgrounds n)))\n\n(defn heterostyled\n  \"Apply heterogeneous styling to tab `kvs`.\"\n  ([kvs]\n   (heterostyled kvs identity))\n  ([kvs order-fn]\n   (let [backgrounds     (cycle (order-fn background-colours))\n         add-background' (partial add-background backgrounds)]\n     (into (empty kvs) (map-indexed add-background' kvs))))\n  ([kvs order-fn backgrounds]\n   (let [backgrounds     (cycle (order-fn backgrounds))\n         add-background' (partial add-background backgrounds)]\n     (into (empty kvs) (map-indexed add-background' kvs)))))\n\n;; TODO: what to do when drag-and-dropping from tabs using same state?\n;; Currently, the two tabs components have their tabs reordered, but should\n;; they duplicate the affected tab instead?\n(defn- tab-list\n  \"The tabs available in the `state`.\"\n  [{:keys [kvs i] :as state}\n   {:keys [id] :as opts}]\n  (state/assert-valid state ::state/kvs+i)\n  (let [{:keys [kvs i] :or {i 0}} @state\n        panel-id (mk-tab-panel-id id i)\n        length   (count kvs)\n        append   (fn [kv]\n                   ;; Internal drops will have no increase in tab count, so when\n                   ;; appending inside the same tab-list we must account for it.\n                   (if (= id (:id (meta kv)))\n                     (swap! state state/mk-drop-state (dec length) kv)\n                     (swap! state state/mk-drop-state length kv)))]\n    [:div.tab-list {:role          \"tablist\"\n                    :aria-label    \"Choose a tab to display\" ;TODO: localisation\n                    :id            id\n                    :on-key-down   kbd/roving-tabindex-handler\n                    :on-drag-enter drag/on-drag-enter\n                    :on-drag-over  drag/on-drag-over\n                    :on-drag-leave drag/on-drag-leave\n                    :on-drop       (drag/on-drop append)}\n     (for [n (range length)\n           :let [[k _ :as kv] (nth kvs n)\n                 selected? (= n i)\n                 tab-id    (mk-tab-id id n)\n                 source-id (mk-tab-panel-id id n)           ; drag container\n                 delete    (fn []\n                             (swap! state state/mk-drag-state n)\n                             (vary-meta kv assoc\n                                        :id id\n                                        :selected? selected?))\n                 insert    (fn [kv]\n                             (swap! state state/mk-drop-state n kv))\n                 select    (fn []\n                             (swap! state assoc :i n))]]\n       ;; Would prefer using button, but FF excludes its padding from drag area.\n       [:span.tab {:role          \"tab\"\n                   :key           (hash [kvs i n])\n                   :id            tab-id\n                   :ref           focus/accept!\n                   :style         (:style (meta kv))\n                   :aria-selected selected?\n                   :aria-controls panel-id\n                   :aria-label    (str \"View tab number \" (inc n)) ;TODO: localisation\n                   :tab-index     (if selected? \"0\" \"-1\")\n                   :auto-focus    selected?\n                   :on-click      select\n                   :draggable     true\n                   :on-drag-start (drag/on-drag-start delete source-id)\n                   :on-drag-end   drag/on-drag-end\n                   :on-drag-enter drag/on-drag-enter\n                   :on-drag-over  drag/on-drag-over\n                   :on-drag-leave drag/on-drag-leave\n                   :on-drop       (drag/on-drop insert)}\n        k])]))\n\n(defn- tab-panel\n  \"The currently selected tab-panel of the `state`.\"\n  [{:keys [kvs i] :as state}\n   {:keys [id] :as opts}]\n  (state/assert-valid state ::state/kvs+i)\n  (let [{:keys [kvs i] :or {i 0}} @state\n        [_ v :as kv] (when (not-empty kvs)\n                       (nth kvs i))]\n    (when v\n      [:section.tab-panel {:role            \"tabpanel\"\n                           :id              (mk-tab-panel-id id i)\n                           :aria-labelledby (mk-tab-id id i)\n                           :style           (:style (meta kv))}\n       v])))\n\n(defn tabs\n  \"Merged view of the tab-list and the tab-panel of the currently selected tab.\n\n  Takes `state` of the form:\n    :kvs - key-value pairs of tab labels and bodies.\n    :i   - (optional) the index of the currently selected tab.\n\n  Various opts for tab components:\n    :id - (optional) a unique id attribute for the tab-list.\n\n  ARIA reference:\n    https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel\"\n  [{:keys [kvs i] :as state}\n   {:keys [id] :as opts}]\n  (let [state (state/prepare ::state/kvs+i state)\n        opts  (assoc opts :id (or id (random-uuid)))]\n    (fn [_ _]\n      [:article.tabs\n       [tab-list state opts]\n       [tab-panel state opts]])))\n\n\n;;;; CAROUSEL\n\n;; TODO: drag-and-drop\n(defn carousel\n  \"Tabbed carousel with a slide picker, but without automatic slide rotation.\n\n  Takes `state` of the form:\n    :kvs  - key-values pairs of slide labels and bodies.\n    :i    - (optional) the index of the currently selected slide.\n\n  Optionally, certain HTML attributes specified in the `opts` may merged with\n  the carousel attr. This should be done in order to satisfy ARIA labeling\n  requirements, e.g. either :aria-label or :aria-labelledby should be set.\n\n  ARIA reference:\n    https://www.w3.org/TR/wai-aria-practices-1.1/#carousel\"\n  [{:keys [kvs i] :as state}\n   {:keys [aria-label\n           aria-labelledby]\n    :as   opts}]\n  (r/with-let [state      (state/prepare ::state/kvs+i state)\n               next-slide #(swap! state update :i inc)\n               prev-slide #(swap! state update :i dec)]\n    (let [{:keys [i kvs]} @state\n          styles       (map (comp :style meta) kvs)\n          [label content] (nth kvs i)\n          tab-panel-id (random-uuid)\n          label-id     (random-uuid)\n          prev?        (> i 0)\n          next?        (< i (dec (count kvs)))]\n      ;; This implementation most closely resembles the Tabbed Carousel:\n      ;; https://www.w3.org/TR/wai-aria-practices-1.1/#tabbed-carousel-elements\n      ;; The outer container follows the basic carousel pattern, while most of\n      ;; the inner parts resemble a regular tabs implementation.\n      [:div.carousel {:role                 \"group\"\n                      :aria-roledescription \"carousel\"\n                      :aria-label           aria-label\n                      :aria-labelledby      aria-labelledby}\n       [:button.carousel__select {:aria-label (str \"View slide number \" i) ;TODO: localisation\n                                  :tab-index  (if prev? \"0\" \"-1\")\n                                  :on-click   (when prev? prev-slide)\n                                  :style      (nth styles (dec i) nil)}]\n       [:div.carousel__slide {:role            \"tabpanel\"\n                              :id              tab-panel-id\n                              :aria-labelledby label-id\n                              :style           (nth styles i)}\n        [:div.carousel__slide-header\n         [:div.carousel__slide-label {:id label-id} label]\n         (when (> (count kvs) 1)\n           (into [:div.slide-picker {:role        \"tablist\"\n                                     :on-key-down kbd/roving-tabindex-handler\n                                     :aria-label  \"Choose a slide to display\"}] ;TODO: localisation\n                 (for [n (range (count kvs))\n                       :let [selected? (= n i)\n                             select    #(swap! state assoc :i n)]]\n                   [:span.slide-picker__dot {:role          \"tab\"\n                                             :aria-controls tab-panel-id\n                                             :aria-selected selected?\n                                             :tab-index     (if selected?\n                                                              \"0\"\n                                                              \"-1\")\n                                             :on-click      select}])))]\n        [:div.carousel__slide-separator]\n        content]\n       [:button.carousel__select {:aria-label (str \"View slide number \" (inc i)) ;TODO: localisation\n                                  :tab-index  (if next? \"0\" \"-1\")\n                                  :on-click   (when next? next-slide)\n                                  :style      (nth styles (inc i) nil)}]])))\n"]}