{"version":3,"sources":["dk/cst/glossematics/db/tei.cljc"],"mappings":"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","names":["dk.cst.glossematics.db.tei/utc-dtf","tick.core.formatter","dk.cst.glossematics.db.tei/utc-fallback-dtf","dk.cst.glossematics.db.tei/value-of","d","dk.cst.glossematics.db.tei/parse-date","formatter","date-str","e45857","tick.core/parse-date","clojure.string/replace","js/Error","e","lambdaisland.glogi.log","cljs.core/identity","dk.cst.glossematics.db.tei/header-patterns","dk.cst.glossematics.db.tei/facsimile-patterns","dk.cst.glossematics.db.tei/text-patterns","dk.cst.glossematics.db.tei/scrape-document","xml","hiccup","dk.cst.cuphic.xml/parse","header","cljs.core.nth","facsimile","text","cljs.core.merge","dk.cst.cuphic/scrape","dk.cst.glossematics.db.tei/placeholder?","dk.cst.glossematics.db.tei/valid?","v","cljs.core/not","or__5045__auto__","clojure.string/blank?","dk.cst.glossematics.db.tei/valid-int?","and__5043__auto__","cljs.core/re-matches","dk.cst.glossematics.db.tei/valid-id?","clojure.string/starts-with?","cljs.core/re-find","dk.cst.glossematics.db.tei/valid-date?","dk.cst.glossematics.db.tei/fix-id","id","dk.cst.glossematics.db.tei/single-val","result","k","cljs.core.get","cljs.core/first","cljs.core.symbol","dk.cst.glossematics.db.tei/single-triple","filename","validation-fn","rel","temp__5804__auto__","dk.cst.glossematics.db.tei/parse-int","js/parseInt","p__45865","map__45866","cljs.core/--destructure-map","dk.cst.glossematics.db.tei/document-triples","objectDesc","correspDesc","body-refs","lang-refs","body-dates","triple","cljs.core.partial","id-triple","cljs.core.comp","p__45867","vec__45868","a","eav","cljs.core.disj","cljs.core.reduce","cljs.core/into","cljs.core/conj","collection","cljs.core/last","cljs.core.update","form","cljs.core.get_in","sender","sender-loc","sent-at","recipient","recipient-loc","iter__5522__auto__","s__45872","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5520__auto__","size__5521__auto__","cljs.core/count","b__45874","cljs.core/chunk-buffer","i__45873","map__45875","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45871","cljs.core/chunk-rest","map__45877","cljs.core/cons","cljs.core/rest","s__45879","b__45881","i__45880","map__45882","iter__45878","map__45883","when","s__45885","b__45887","i__45886","map__45893","iter__45884","map__45899","tag","ref","?type","s__45901","b__45903","i__45902","map__45905","iter__45900","map__45907","dk.cst.glossematics.db.tei/->triples","content","dk.cst.glossematics.db.tei/triples->entity","triples","ident","cljs.core/ffirst","s__45913","b__45915","i__45914","vec__45920","iter__45912","vec__45926","_","cljs.core.apply","cljs.core/merge-with","clojure.set/union","cljs.core/chunk-first"],"sourcesContent":["(ns dk.cst.glossematics.db.tei\n  \"Scrape metadata from TEI documents in both the frontend and the backend.\"\n  (:require [clojure.string :as str]\n            #?(:clj [clojure.java.io :as io])\n            [clojure.set :as set]\n            [tick.core :as t]\n            [tick.locale-en-us]                             ; need it for some reason\n            #?(:clj  [io.pedestal.log :as log]\n               :cljs [lambdaisland.glogi :as log])\n            [dk.cst.cuphic :as cup]\n            [dk.cst.cuphic.xml :as xml])\n  #?(:clj (:import [java.io File]\n                   [java.sql Date]\n                   [java.time LocalDate]\n                   [java.time.temporal ChronoField]\n                   [java.time.format DateTimeFormatter\n                                     DateTimeFormatterBuilder\n                                     DateTimeParseException])))\n\n(def utc-dtf\n  (t/formatter \"yyyy-MM-dd\"))\n\n(def utc-fallback-dtf\n  \"NOTE: Defaults to 1 january in case either is missing.\"\n  #?(:clj  (-> (DateTimeFormatterBuilder.)\n               (.appendPattern \"yyyy[-MM[-dd]]\")\n               (.parseDefaulting ChronoField/MONTH_OF_YEAR 1)\n               (.parseDefaulting ChronoField/DAY_OF_MONTH 1)\n               (.toFormatter))\n     :cljs utc-dtf))\n\n;; TODO: is this right?\n(defn value-of\n  [d]\n  #?(:clj  (Date/valueOf ^LocalDate d)\n     :cljs (.valueOf d)))\n\n(defn parse-date\n  \"Parse a `date-str` using the `formatter` of choice. Expects some noise in\n  the data (e.g. Viggo's Excel file) so all dots are converted into dashes.\"\n  [formatter date-str]\n  (if (string? date-str)\n    (try\n      (value-of (t/parse-date (str/replace date-str #\"\\.\" \"-\") formatter))\n      (catch #?(:clj DateTimeParseException :cljs js/Error) e ; missing year?\n        (log/warn \"Could not parse date: \" date-str)))\n    date-str))\n\n;; TODO: is ?optional switched with non-optional? see :document-type\n;; TODO: the ... pattern not working correctly in Cuphic?\n(def header-patterns\n  {:language    '[:language {:ident language} ???]\n   :title       '[:title {} title]\n   :author      '[:author {:ref author} ???]\n   :settlement  '[:settlement {:ref settlement} ???]\n   :repository  '[:repository {:ref repository} ???]\n   :collection  '[:collection {} collection]\n   :objectDesc  '[:objectDesc {:form form}\n                  [:supportDesc {}\n                   [:support {} support]\n                   [:extent {}\n                    [:note {} page-count]]]]\n\n   ;; TODO: adjust - doesn't match in https://glossematics.dk/app/reader/20.9.1945-Holt-LH-tei-final.xml\n   :correspDesc '[:correspDesc\n                  {}\n                  [:correspAction\n                   {:type \"sent\"}\n                   [:persName {:ref sender} ???]\n                   [:placeName {:ref sender-loc}]\n                   [:date {} sent-at]]\n                  [:correspAction {:type \"received\"}\n                   [:persName {:ref recipient} ???]\n                   [:placeName {:ref recipient-loc}]]]\n\n   :hand-desc   '[:handDesc {} [:p {} hand-desc]]})\n\n(def facsimile-patterns\n  {:facsimile '[:graphic {:xml/id id}]})\n\n(def text-patterns\n  {:body-refs  '[tag {:ref  ref\n                      :type ?type} ???]\n   :lang-refs  '[:note {:type \"language\"\n                        :n    ref} ???]\n   :body-dates '[:date {:when when} ???]})\n\n(defn scrape-document\n  [xml]\n  (let [hiccup    (xml/parse xml)\n        header    (nth hiccup 2)\n        facsimile (nth hiccup 3)\n        text      (nth hiccup 4)]\n    (merge\n      (cup/scrape header header-patterns)\n      (cup/scrape facsimile facsimile-patterns)\n      (cup/scrape text text-patterns))))\n\n(def placeholder?\n  #{\"xx\" \"#xx\" \"NA\"})\n\n(defn valid?\n  [v]\n  (not (or (str/blank? v)\n           (placeholder? v))))\n\n(defn valid-int?\n  [v]\n  (and (valid? v)\n       (re-matches #\"\\d+\" v)))\n\n(defn valid-id?\n  [v]\n  (and (valid? v)\n       ;; TODO: make Dorte streamline archive IDs in the TEI files\n       (or (str/starts-with? v \"n\")                         ; used for archives\n           (str/starts-with? v \"#n\"))\n       (re-find #\"\\d$\" v)))\n\n(defn valid-date?\n  [v]\n  (re-matches #\"\\d\\d\\d\\d-\\d\\d-\\d\\d\" v))\n\n;; Since Dorte's IDs sometimes have a prefixed # and sometimes don't\n(defn fix-id\n  [id]\n  (if (str/starts-with? id \"#\")\n    id\n    (str \"#\" id)))\n\n(defn single-val\n  [result k]\n  (-> (get result k) first (get (symbol k))))\n\n(defn single-triple\n  [result filename validation-fn rel k]\n  (when-let [v (single-val result k)]\n    (when (validation-fn v)\n      [filename rel v])))\n\n(def parse-int\n  #?(:clj  parse-long\n     :cljs js/parseInt))\n\n(defn document-triples\n  [filename {:keys [objectDesc\n                    correspDesc\n                    facsimile\n                    body-refs\n                    lang-refs\n                    body-dates]\n             :as   result}]\n  (let [triple    (partial single-triple result filename valid?)\n        id-triple (comp\n                    (fn [[e a v :as eav]] (when eav [e a (fix-id v)]))\n                    (partial single-triple result filename valid-id?))]\n    (disj\n      (reduce\n        into\n        (reduce\n          conj\n          #{}\n          [(triple :document/title :title)\n           (triple :document/hand :hand-desc)\n           (id-triple :document/author :author)\n           (id-triple :document/language :language)\n           (id-triple :document/repository :repository)\n           (id-triple :document/settlement :settlement)\n           (let [collection (triple :document/collection :collection)]\n             (when (valid-int? (last collection))\n               (update collection 2 parse-int)))\n           (when-let [form (get-in objectDesc [0 'form])]\n             [filename :document/form form])\n           (when-let [sender (get-in correspDesc [0 'sender])]\n             (when (valid-id? sender)\n               [filename :document/sender sender]))\n           (when-let [sender-loc (get-in correspDesc [0 'sender-loc])]\n             (when (valid-id? sender-loc)\n               [filename :document/sender-location sender-loc]))\n           (when-let [sent-at (get-in correspDesc [0 'sent-at])]\n             (when (valid-date? sent-at)\n               [filename :document/sent-at (parse-date utc-dtf sent-at)]))\n           (when-let [recipient (get-in correspDesc [0 'recipient])]\n             (when (valid-id? recipient)\n               [filename :document/recipient recipient]))\n           (when-let [recipient-loc (get-in correspDesc [0 'recipient-loc])]\n             (when (valid-id? recipient-loc)\n               [filename :document/recipient-location recipient-loc]))])\n        [(for [{:syms [id]} facsimile]\n           [filename :document/facsimile id])\n         (for [{:syms [when]} body-dates]\n           [filename :document/date-mention (parse-date utc-fallback-dtf when)])\n         (for [{:syms [tag ref ?type]} body-refs]\n           (when (valid-id? ref)\n             [filename :document/mention ref]))\n         (for [{:syms [ref]} lang-refs]\n           (when (valid-id? ref)\n             [filename :document/mention ref]))])\n      nil)))\n\n(defn ->triples\n  \"Create Asami triples from either a `filepath` or `filename`/`content` combo.\"\n  #?(:clj ([filepath]\n           (let [file (io/file filepath)]\n             (document-triples (.getName file) (scrape-document file)))))\n  ([filename content]\n   (document-triples filename (scrape-document content))))\n\n(defn triples->entity\n  \"Assemble Asami `triples` into an Asami entity.\"\n  [triples]\n  (let [ident (ffirst triples)]\n    (->> (for [[_ k v] triples]\n           {k #{v}})\n         (apply merge-with set/union {:db/ident ident}))))\n\n(comment\n  (def example (io/file \"/Users/rqf595/Desktop/Glossematics-data/N-drev/Data-FINAL/DanielJones/TEI/DJtilHJU-1931-02-14-tei-final.xml\"))\n  (xml/parse (slurp example))\n  (scrape-document (slurp example))\n  (->triples example)\n  (triples->entity (->triples example))\n\n  (parse-date utc-fallback-dtf \"1899-10-03\")\n  (parse-date utc-dtf \"2022-03-25\")\n  #_.)"]}