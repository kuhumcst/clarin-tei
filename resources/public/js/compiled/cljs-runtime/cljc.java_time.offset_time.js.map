{"version":3,"sources":["cljc/java_time/offset_time.cljs"],"mappings":"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","names":["cljc.java-time.offset-time/min","cljc.java_time.offset_time.goog$module$goog$object.get","java.time/OffsetTime","cljc.java-time.offset-time/max","cljc.java-time.offset-time/minus-minutes","this13957","long13958","cljc.java-time.offset-time/truncated-to","this13959","java-time-temporal-TemporalUnit13960","cljc.java-time.offset-time/range","this13961","java-time-temporal-TemporalField13962","cljc.java-time.offset-time/get-hour","this13963","cljc.java-time.offset-time/minus-hours","this13964","long13965","var_args","G__40070","cljc.java-time.offset-time/of","js/Error","java-time-LocalTime13966","java-time-ZoneOffset13967","cljs.core.js_invoke","int13968","int13969","int13970","int13971","java-time-ZoneOffset13972","cljc.java-time.offset-time/is-equal","this13973","java-time-OffsetTime13974","cljc.java-time.offset-time/get-nano","this13975","cljc.java-time.offset-time/minus-seconds","this13976","long13977","cljc.java-time.offset-time/get-second","this13978","cljc.java-time.offset-time/plus-nanos","this13979","long13980","G__40077","cljc.java-time.offset-time/plus","this13981","long13982","java-time-temporal-TemporalUnit13983","this13984","java-time-temporal-TemporalAmount13985","cljc.java-time.offset-time/with-hour","this13986","int13987","cljc.java-time.offset-time/with-minute","this13988","int13989","cljc.java-time.offset-time/plus-minutes","this13990","long13991","cljc.java-time.offset-time/query","this13992","java-time-temporal-TemporalQuery13993","cljc.java-time.offset-time/at-date","this13994","java-time-LocalDate13995","cljc.java-time.offset-time/with-offset-same-instant","this13996","java-time-ZoneOffset13997","cljc.java-time.offset-time/to-string","this13998","cljc.java-time.offset-time/is-before","this13999","java-time-OffsetTime14000","G__40095","cljc.java-time.offset-time/minus","this14001","long14002","java-time-temporal-TemporalUnit14003","this14004","java-time-temporal-TemporalAmount14005","cljc.java-time.offset-time/plus-hours","this14006","long14007","cljc.java-time.offset-time/to-local-time","this14008","cljc.java-time.offset-time/get-long","this14009","java-time-temporal-TemporalField14010","cljc.java-time.offset-time/get-offset","this14011","cljc.java-time.offset-time/with-nano","this14012","int14013","cljc.java-time.offset-time/until","this14014","java-time-temporal-Temporal14015","java-time-temporal-TemporalUnit14016","cljc.java-time.offset-time/with-offset-same-local","this14017","java-time-ZoneOffset14018","cljc.java-time.offset-time/from","java-time-temporal-TemporalAccessor14019","cljc.java-time.offset-time/is-after","this14020","java-time-OffsetTime14021","cljc.java-time.offset-time/minus-nanos","this14022","long14023","cljc.java-time.offset-time/is-supported","this14024","G__14025","G__40111","cljc.java-time.offset-time/parse","java-lang-CharSequence14026","java-lang-CharSequence14027","java-time-format-DateTimeFormatter14028","cljc.java-time.offset-time/with-second","this14029","int14030","cljc.java-time.offset-time/get-minute","this14031","cljc.java-time.offset-time/hash-code","this14032","cljc.java-time.offset-time/adjust-into","this14033","java-time-temporal-Temporal14034","G__40122","cljc.java-time.offset-time/with","this14035","java-time-temporal-TemporalAdjuster14036","this14037","java-time-temporal-TemporalField14038","long14039","G__40128","cljc.java-time.offset-time/now","cljs.core/js-invoke","G__14041","cljc.java-time.offset-time/compare-to","this14042","java-time-OffsetTime14043","cljc.java-time.offset-time/of-instant","java-time-Instant14044","java-time-ZoneId14045","cljc.java-time.offset-time/plus-seconds","this14046","long14047","cljc.java-time.offset-time/get","this14048","java-time-temporal-TemporalField14049","cljc.java-time.offset-time/equals","this14050","java-lang-Object14051","cljc.java-time.offset-time/format","this14052","java-time-format-DateTimeFormatter14053"],"sourcesContent":["(ns cljc.java-time.offset-time (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [OffsetTime]]))\n(def min (goog.object/get java.time.OffsetTime \"MIN\"))\n(def max (goog.object/get java.time.OffsetTime \"MAX\"))\n(clojure.core/defn minus-minutes {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13957 ^long long13958] (.minusMinutes this13957 long13958)))\n(clojure.core/defn truncated-to {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalUnit\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13959 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13960] (.truncatedTo this13959 java-time-temporal-TemporalUnit13960)))\n(clojure.core/defn range {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetTime this13961 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13962] (.range this13961 java-time-temporal-TemporalField13962)))\n(clojure.core/defn get-hour {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this13963] (.hour this13963)))\n(clojure.core/defn minus-hours {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13964 ^long long13965] (.minusHours this13964 long13965)))\n(clojure.core/defn of {:arglists (quote ([\"java.time.LocalTime\" \"java.time.ZoneOffset\"] [\"int\" \"int\" \"int\" \"int\" \"java.time.ZoneOffset\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime java-time-LocalTime13966 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13967] (js-invoke java.time.OffsetTime \"of\" java-time-LocalTime13966 java-time-ZoneOffset13967)) (^js/JSJoda.OffsetTime [^int int13968 ^int int13969 ^int int13970 ^int int13971 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13972] (js-invoke java.time.OffsetTime \"of\" int13968 int13969 int13970 int13971 java-time-ZoneOffset13972)))\n(clojure.core/defn is-equal {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^boolean [^js/JSJoda.OffsetTime this13973 ^js/JSJoda.OffsetTime java-time-OffsetTime13974] (.isEqual this13973 java-time-OffsetTime13974)))\n(clojure.core/defn get-nano {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this13975] (.nano this13975)))\n(clojure.core/defn minus-seconds {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13976 ^long long13977] (.minusSeconds this13976 long13977)))\n(clojure.core/defn get-second {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this13978] (.second this13978)))\n(clojure.core/defn plus-nanos {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13979 ^long long13980] (.plusNanos this13979 long13980)))\n(clojure.core/defn plus {:arglists (quote ([\"java.time.OffsetTime\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.OffsetTime\" \"java.time.temporal.TemporalAmount\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13981 ^long long13982 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13983] (.plus this13981 long13982 java-time-temporal-TemporalUnit13983)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13984 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount13985] (.plus this13984 java-time-temporal-TemporalAmount13985)))\n(clojure.core/defn with-hour {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13986 ^int int13987] (.withHour this13986 int13987)))\n(clojure.core/defn with-minute {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13988 ^int int13989] (.withMinute this13988 int13989)))\n(clojure.core/defn plus-minutes {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13990 ^long long13991] (.plusMinutes this13990 long13991)))\n(clojure.core/defn query {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalQuery\"]))} (^java.lang.Object [^js/JSJoda.OffsetTime this13992 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery13993] (.query this13992 java-time-temporal-TemporalQuery13993)))\n(clojure.core/defn at-date {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.LocalDate\"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetTime this13994 ^js/JSJoda.LocalDate java-time-LocalDate13995] (.atDate this13994 java-time-LocalDate13995)))\n(clojure.core/defn with-offset-same-instant {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.ZoneOffset\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13996 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13997] (.withOffsetSameInstant this13996 java-time-ZoneOffset13997)))\n(clojure.core/defn to-string {:arglists (quote ([\"java.time.OffsetTime\"]))} (^java.lang.String [^js/JSJoda.OffsetTime this13998] (.toString this13998)))\n(clojure.core/defn is-before {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^boolean [^js/JSJoda.OffsetTime this13999 ^js/JSJoda.OffsetTime java-time-OffsetTime14000] (.isBefore this13999 java-time-OffsetTime14000)))\n(clojure.core/defn minus {:arglists (quote ([\"java.time.OffsetTime\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.OffsetTime\" \"java.time.temporal.TemporalAmount\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this14001 ^long long14002 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14003] (.minus this14001 long14002 java-time-temporal-TemporalUnit14003)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this14004 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount14005] (.minus this14004 java-time-temporal-TemporalAmount14005)))\n(clojure.core/defn plus-hours {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this14006 ^long long14007] (.plusHours this14006 long14007)))\n(clojure.core/defn to-local-time {:arglists (quote ([\"java.time.OffsetTime\"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetTime this14008] (.toLocalTime this14008)))\n(clojure.core/defn get-long {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"]))} (^long [^js/JSJoda.OffsetTime this14009 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14010] (.getLong this14009 java-time-temporal-TemporalField14010)))\n(clojure.core/defn get-offset {:arglists (quote ([\"java.time.OffsetTime\"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetTime this14011] (.offset this14011)))\n(clojure.core/defn with-nano {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this14012 ^int int14013] (.withNano this14012 int14013)))\n(clojure.core/defn until {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.Temporal\" \"java.time.temporal.TemporalUnit\"]))} (^long [^js/JSJoda.OffsetTime this14014 ^js/JSJoda.Temporal java-time-temporal-Temporal14015 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14016] (.until this14014 java-time-temporal-Temporal14015 java-time-temporal-TemporalUnit14016)))\n(clojure.core/defn with-offset-same-local {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.ZoneOffset\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this14017 ^js/JSJoda.ZoneOffset java-time-ZoneOffset14018] (.withOffsetSameLocal this14017 java-time-ZoneOffset14018)))\n(clojure.core/defn from {:arglists (quote ([\"java.time.temporal.TemporalAccessor\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor14019] (js-invoke java.time.OffsetTime \"from\" java-time-temporal-TemporalAccessor14019)))\n(clojure.core/defn is-after {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^boolean [^js/JSJoda.OffsetTime this14020 ^js/JSJoda.OffsetTime java-time-OffsetTime14021] (.isAfter this14020 java-time-OffsetTime14021)))\n(clojure.core/defn minus-nanos {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this14022 ^long long14023] (.minusNanos this14022 long14023)))\n(clojure.core/defn is-supported {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalUnit\"] [\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"]))} (^boolean [this14024 G__14025] (.isSupported ^js/JSJoda.OffsetTime this14024 G__14025)))\n(clojure.core/defn parse {:arglists (quote ([\"java.lang.CharSequence\"] [\"java.lang.CharSequence\" \"java.time.format.DateTimeFormatter\"]))} (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence14026] (js-invoke java.time.OffsetTime \"parse\" java-lang-CharSequence14026)) (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence14027 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter14028] (js-invoke java.time.OffsetTime \"parse\" java-lang-CharSequence14027 java-time-format-DateTimeFormatter14028)))\n(clojure.core/defn with-second {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this14029 ^int int14030] (.withSecond this14029 int14030)))\n(clojure.core/defn get-minute {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this14031] (.minute this14031)))\n(clojure.core/defn hash-code {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this14032] (.hashCode this14032)))\n(clojure.core/defn adjust-into {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.Temporal\"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetTime this14033 ^js/JSJoda.Temporal java-time-temporal-Temporal14034] (.adjustInto this14033 java-time-temporal-Temporal14034)))\n(clojure.core/defn with {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalAdjuster\"] [\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this14035 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster14036] (.with this14035 java-time-temporal-TemporalAdjuster14036)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this14037 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14038 ^long long14039] (.with this14037 java-time-temporal-TemporalField14038 long14039)))\n(clojure.core/defn now {:arglists (quote ([] [\"java.time.ZoneId\"] [\"java.time.Clock\"]))} (^js/JSJoda.OffsetTime [] (js-invoke java.time.OffsetTime \"now\")) (^js/JSJoda.OffsetTime [G__14041] (js-invoke java.time.OffsetTime \"now\" G__14041)))\n(clojure.core/defn compare-to {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this14042 ^js/JSJoda.OffsetTime java-time-OffsetTime14043] (.compareTo this14042 java-time-OffsetTime14043)))\n(clojure.core/defn of-instant {:arglists (quote ([\"java.time.Instant\" \"java.time.ZoneId\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.Instant java-time-Instant14044 ^js/JSJoda.ZoneId java-time-ZoneId14045] (js-invoke java.time.OffsetTime \"ofInstant\" java-time-Instant14044 java-time-ZoneId14045)))\n(clojure.core/defn plus-seconds {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this14046 ^long long14047] (.plusSeconds this14046 long14047)))\n(clojure.core/defn get {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"]))} (^int [^js/JSJoda.OffsetTime this14048 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14049] (.get this14048 java-time-temporal-TemporalField14049)))\n(clojure.core/defn equals {:arglists (quote ([\"java.time.OffsetTime\" \"java.lang.Object\"]))} (^boolean [^js/JSJoda.OffsetTime this14050 ^java.lang.Object java-lang-Object14051] (.equals this14050 java-lang-Object14051)))\n(clojure.core/defn format {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.format.DateTimeFormatter\"]))} (^java.lang.String [^js/JSJoda.OffsetTime this14052 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter14053] (.format this14052 java-time-format-DateTimeFormatter14053)))\n"]}