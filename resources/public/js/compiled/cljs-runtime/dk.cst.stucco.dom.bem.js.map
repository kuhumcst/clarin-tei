{"version":3,"sources":["dk/cst/stucco/dom/bem.cljs"],"mappings":";AAGA,kCAAA,lCAAKA;AAIL;;;2CAAA,3CAAMC,8FAEHC,QAAQC;AAFX,AAGE,IAAMC,aAAW,AAAaF;IACxBG,SAAW,mRAAA,jEAAU,AAACC,kDAAUF,vMACX,AAACG,+CAAO,AAACC,gDAAQC,qBAAWT,pIAC5B,AAACU,uRACDP;AAJ3B,AAKE,OAAMC,eAAWC;;AAErB;;;8CAAA,9CAAMM,oGAEHT,QAAQC;AAFX,AAGE,IAAMC,aAAW,AAAaF;IACxBG,yBACgB,+CAAA,WAAAO,1DAACL,hBACD,AAACG;AADD,AAAS,uCAAAE,hCAACC,iDAAiB,CAAA,iDAAUV;GADrC,AAACG,kDAAUF;AADjC,AAIE,OAASA,kBAAWC","names":["dk.cst.stucco.dom.bem/bem-block","dk.cst.stucco.dom.bem/add-modifier!","element","modifier","class-list","class","cljs.core.array_seq","cljs.core.filter","cljs.core.partial","cljs.core/re-matches","cljs.core/first","dk.cst.stucco.dom.bem/remove-modifier!","p1__39627#","clojure.string/ends-with?"],"sourcesContent":["(ns dk.cst.stucco.dom.bem\n  (:require [clojure.string :as str]))\n\n(def bem-block\n  #\"(\\w-?)+\")\n\n;; Assumes BEM convention is respected, i.e. only a single block class applied.\n(defn add-modifier!\n  \"Add a BEM `modifier` class to an `element`.\"\n  [element modifier]\n  (let [class-list (.-classList element)\n        class      (str (->> (array-seq class-list)\n                             (filter (partial re-matches bem-block))\n                             (first))\n                        \"--\" modifier)]\n    (.add class-list class)))\n\n(defn remove-modifier!\n  \"Remove a BEM `modifier` class from an `element`.\"\n  [element modifier]\n  (let [class-list (.-classList element)\n        class      (->> (array-seq class-list)\n                        (filter #(str/ends-with? % (str \"--\" modifier)))\n                        (first))]\n    (.remove class-list class)))"]}