{"version":3,"sources":["dk/cst/stucco/group.cljs"],"mappings":"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","names":["dk.cst.stucco.group/redistribute","weights","m","n","delta","cljs.core.assoc","x__5130__auto__","y__5131__auto__","cljs.core.get","var_args","args__5774__auto__","len__5768__auto__","i__5769__auto__","argseq__5775__auto__","cljs.core/IndexedSeq","dk.cst.stucco.group/combination","p__45079","map__45081","cljs.core/--destructure-map","seq45072","G__45073","cljs.core/first","cljs.core/next","self__5753__auto__","state","vs","with-let45082","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__36614__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init45083","cljs.core/not","res45084","dk.cst.stucco.util.state/normalize","resize-state","reagent.core.atom","map__45085","cljs.core/deref","cljs.core.mapv","cljs.core/constantly","cljs.core.range","cljs.core/count","resizing","key-prefix","cljs.core/hash","columns","p1__45070#","cljs.core.map","cljs.core.interpose","clojure.string.join","resize-begin","e","elements","widths","iter__5522__auto__","s__45090","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5520__auto__","size__5521__auto__","b__45092","cljs.core/chunk-buffer","i__45091","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45089","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","elem","cljs.core.take_nth","cljs.core/reset!","cljs.core/vec","resize-move","map__45095","x","x'","weights'","cljs.core.swap_BANG_","cljs.core/assoc","resize-end","s__45102","b__45104","i__45103","vec__45105","cljs.core.nth","iter__45101","vec__45110","v","cljs.core.map_indexed","cljs.core/vector","key","cljs.core._EQ_","cljs.core/chunk-first"],"sourcesContent":["(ns dk.cst.stucco.group\n  \"Reagent components for making loosely defined groupings.\n\n  These components are used to group components together in a flexible manner,\n  allowing the user to manipulate the layout directly. Ideally, these comprise\n  the second (or a lower) level in a layout, with the top level composed of\n  WAI-ARIA landmarks (available in the 'dk.cst.stucco.landmark' namespace).\n\n  For more semantic groupings, take a look at the implemented WAI-ARIA patterns\n  available in the 'dk.cst.stucco.pattern' namespace.\n\n  ARIA references:\n    https://www.w3.org/TR/wai-aria-practices-1.1/#aria_landmark\n    https://www.w3.org/TR/wai-aria-practices-1.1/examples/landmarks/\"\n  (:require [clojure.string :as str]\n            [reagent.core :as r]\n            [dk.cst.stucco.util.state :as state]))\n\n(defn- redistribute\n  \"Redistribute `weights` such that the `delta` is subtracted from the weight at\n  index `n` and added to the weight at index `m`.\"\n  [weights m n delta]\n  (assoc weights\n    m (max 0 (+ (get weights m) delta))\n    n (max 0 (- (get weights n) delta))))\n\n;; TODO: less clunky css for separator (thin oval gradient?)\n;; TODO: check that (count weights) matches (count vs) - in spec?\n;; TODO: invisible overlay container for resize mouse handlers\n(defn combination\n  \"A combination of `vs`, with the space optionally partitioned by `weights`.\n  If no `weights` are specified, each v will initially take up equal size.\n  The `vs` will typically be various functionally related Stucco components.\"\n  [{:keys [weights] :as state} & vs]\n  (r/with-let [state        (state/normalize state)\n               resize-state (r/atom nil)]\n    (let [{:keys [weights]\n           :or   {weights (mapv (constantly 1) (range (count vs)))}} @state\n          resizing     @resize-state\n          key-prefix   (hash vs)\n          columns      (->> weights\n                            (map #(str \"minmax(min-content, \" % \"fr)\"))\n                            (interpose \"var(--grid-16)\")\n                            (str/join \" \"))\n          resize-begin (fn [m n]\n                         (fn [e]\n                           (let [elements (.. e -target -parentNode -children)\n                                 widths   (for [elem (take-nth 2 elements)]\n                                            (.-offsetWidth elem))]\n                             (reset! resize-state {:widths (vec widths)\n                                                   :m      m\n                                                   :n      n\n                                                   :x      (.-clientX e)}))))\n          resize-move  (fn [e]\n                         (when-let [{:keys [widths m n x]} @resize-state]\n                           (let [x'       (.-clientX e)\n                                 weights' (redistribute widths m n (- x' x))]\n                             (swap! state assoc :weights weights'))))\n          resize-end   #(reset! resize-state nil)]\n      [:div.combination {:on-mouse-move  resize-move\n                         :on-mouse-up    resize-end\n                         :on-mouse-leave resize-end\n                         :class          (when resizing\n                                           \"combination--resize\")\n                         :style          {:grid-template-columns columns}}\n       (for [[n v] (map-indexed vector vs)\n             :let [key (str key-prefix \"-\" (hash v) \"-\" n)]]\n         [:<> {:key key}\n          (when (> n 0)\n            [:div.combination__separator\n             {:class         (when (= n (:n resizing))\n                               \"combination__separator--resize\")\n              :on-mouse-down (resize-begin (dec n) n)}])\n          [:div v]])])))\n"]}