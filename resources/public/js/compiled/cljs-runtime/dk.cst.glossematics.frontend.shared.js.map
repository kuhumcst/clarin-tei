{"version":3,"sources":["dk/cst/glossematics/frontend/shared.cljs"],"mappings":"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","names":["dk.cst.glossematics.frontend.shared/-surname-first","s","parts","clojure.string.split","cljs.core.apply","cljs.core/str","cljs.core/last","clojure.string.join","cljs.core/butlast","dk.cst.glossematics.frontend.shared/surname-first","cljs.core/memoize","dk.cst.glossematics.frontend.shared/str-sort-val","clojure.string/replace","dk.cst.glossematics.frontend.shared/visible?","element","rect","or__5045__auto__","js/window.innerHeight","js/document.documentElement.clientHeight","js/window.innerWidth","js/document.documentElement.clientWidth","var_args","G__45864","dk.cst.glossematics.frontend.shared/find-fragment","js/Error","fragment","temp__5804__auto__","elem","js/document.querySelector","cljs.core/not-empty","js/window.location.hash","dk.cst.glossematics.frontend.shared.find_fragment","dk.cst.glossematics.frontend.shared/encyclopedia-href","ref","reitit.frontend.easy.href","clojure.string/starts-with?","cljs.core.subs","dk.cst.glossematics.frontend.shared/search-href","cljs.core.merge","cljs.core/select-keys","dk.cst.glossematics.frontend.state/query-defaults","dk.cst.glossematics.frontend.shared/index-href","entity-type","cljs.core/name","dk.cst.glossematics.frontend.shared/reader-href","document","dk.cst.glossematics.frontend.shared/bib-href","author","dk.cst.glossematics.frontend.shared/legal-id","s'","dk.cst.glossematics.static-data/danish-letter->ascii","cljs.core/not","cljs.core/re-matches","js/Math.abs","cljs.core/hash","cljs.core/re-find","dk.cst.glossematics.frontend.shared/backgrounds","cljs.core/cycle","dk.cst.stucco.pattern/background-colours","dk.cst.glossematics.frontend.shared/add-backgrounds","kvs","offset","dk.cst.stucco.pattern.heterostyled","cljs.core/identity","cljs.core.drop","dk.cst.glossematics.frontend.shared/sort-coll","id->name","coll","cljs.core.sort_by","cljs.core/inst?","cljs.core/first","p1__45876#","cljs.core.comp","cljs.core.get","dk.cst.glossematics.frontend.shared/group-coll","id->type","cljs.core/group-by","tick.core/year","dk.cst.glossematics.static-data/entity-types","dk.cst.glossematics.frontend.shared/break-str-xf","sep?","cljs.core.partial","cljs.core.partition_by","cljs.core.map","cs","and__5043__auto__","cljs.core._EQ_","cljs.core/count","dk.cst.glossematics.frontend.shared/break-str","cljs.core.into","p__45896","map__45897","cljs.core/--destructure-map","dk.cst.glossematics.frontend.shared/metadata-table-val","search-state","m","k","v","into-ul","p1__45890#","p1__45891#","cljs.core/PersistentVector","cljs.core/vector?","cljs.core/set?","href","G__45904","dk.cst.glossematics.static-data/id->author","img-src","G__45906","cljs.core/key","p__45908","vec__45909","cljs.core.nth","cljs.core/boolean?","d","ret","cljs.core/coll?","dk.cst.glossematics.frontend.shared/metadata-table","iter__5522__auto__","s__45917","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5520__auto__","size__5521__auto__","b__45919","cljs.core/chunk-buffer","i__45918","vec__45923","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45916","cljs.core/chunk-rest","vec__45930","cljs.core/cons","cljs.core/rest","dk.cst.glossematics.static-data/rel->label","args__5774__auto__","len__5768__auto__","i__5769__auto__","argseq__5775__auto__","cljs.core/IndexedSeq","dk.cst.glossematics.frontend.shared/kvs-list","p__45942","vec__45944","seq45938","G__45939","cljs.core/next","G__45940","self__5753__auto__","val-com","s__45948","b__45950","i__45949","vec__45952","iter__45947","vec__45962","kv","cljs.core/meta","dk.cst.glossematics.frontend.shared/single","x","cljs.core.sort","cljs.core/chunk-first"],"sourcesContent":["(ns dk.cst.glossematics.frontend.shared\n  \"Frontend code that can be freely shared between frontend namespaces.\"\n  (:require [clojure.string :as str]\n            [reitit.frontend.easy :as rfe]\n            [tick.core :as t]\n            [dk.cst.glossematics.frontend.state :as state]\n            [dk.cst.glossematics.static-data :as sd]\n            [dk.cst.stucco.pattern :as stp]))\n\n(defn -surname-first\n  [s]\n  (let [parts (str/split s #\" \")]\n    (apply str (last parts) \", \" (str/join \" \" (butlast parts)))))\n\n(def surname-first\n  \"Put the surname of `s` in front, followed by a comma and the other parts.\"\n  (memoize -surname-first))\n\n(defn str-sort-val\n  \"Remove prepended parentheses from `s`.\"\n  [s]\n  (-> (str s)\n      (str/replace #\"^\\(.+\\)\\s*\" \"\")\n      (str/replace #\"^\\-\\s*\" \"\")))\n\n;; https://www.javascripttutorial.net/dom/css/check-if-an-element-is-visible-in-the-viewport/\n(defn- visible?\n  \"Is the `element` fully located inside the browser's viewport?\"\n  [element]\n  (let [rect (.getBoundingClientRect element)]\n    (and (>= (.-top rect) (.-left rect) 0)\n         (<= (.-bottom rect) (or js/window.innerHeight\n                                 js/document.documentElement.clientHeight))\n         (<= (.-right rect) (or js/window.innerWidth\n                                js/document.documentElement.clientWidth)))))\n\n(defn find-fragment\n  \"Scroll to the `fragment`; if none specified, read from window.location.hash.\"\n  ([fragment]\n   (when-let [elem (js/document.querySelector fragment)]\n     (.scrollIntoView elem #js{:behavior \"smooth\"})))\n  ([]\n   (when-let [fragment (not-empty js/window.location.hash)]\n     (find-fragment fragment))))\n\n;; TODO: eventually use :as-alias\n(defn encyclopedia-href\n  [ref]\n  (rfe/href :dk.cst.glossematics.frontend.page.search.encyclopedia/entry\n            {:ref (if (str/starts-with? ref \"#\")\n                    (subs ref 1)\n                    ref)}))\n\n;; TODO: eventually use :as-alias\n(defn search-href\n  [ref]\n  (rfe/href :dk.cst.glossematics.frontend.page.search/page {}\n            (merge (select-keys state/query-defaults [:limit :offset])\n                   {'_ ref})))\n\n;; TODO: eventually use :as-alias\n(defn index-href\n  [entity-type]\n  (rfe/href :dk.cst.glossematics.frontend.page.index/page\n            {:kind (name entity-type)}))\n\n;; TODO: eventually use :as-alias\n(defn reader-href\n  [document]\n  (rfe/href :dk.cst.glossematics.frontend.page.reader/page\n            {:document document}))\n\n(defn bib-href\n  [author]\n  (rfe/href :dk.cst.glossematics.frontend.page.bibliography/page\n            {:author author}))\n\n(defn legal-id\n  \"Make sure `s` is a legal HTML id/fragment, e.g. doesn't start with a number.\"\n  [s]\n  (let [s' (str/replace s #\"[\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5]\" sd/danish-letter->ascii)]\n    (cond\n      (not (re-matches #\"[a-zA-Z0-9]+\" s'))\n      (str \"X\" (js/Math.abs (hash s')))\n\n      (re-find #\"^\\d\" s')\n      (str \"No\" s')\n\n      :else s')))\n\n(def backgrounds\n  (cycle stp/background-colours))\n\n;; TODO: missing proper cycle http://localhost:9000/app/search?_=%23np57%2C%23np388&limit=10&offset=10\n(defn- add-backgrounds\n  [kvs offset]\n  (stp/heterostyled kvs identity (if (number? offset)\n                                   (drop offset backgrounds)\n                                   backgrounds)))\n\n(defn- sort-coll\n  [id->name coll]\n  (sort-by (if (inst? (first coll))\n             identity\n             (comp str-sort-val #(get id->name % %)))\n           coll))\n\n(defn- group-coll\n  [id->type coll]\n  (group-by (if (inst? (first coll))\n              (comp str t/year)\n              (comp :entity-label sd/entity-types id->type))\n            coll))\n\n(def break-str-xf\n  \"Transducer for annotating long Hiccup strings with word break opportunities.\"\n  (let [sep? (partial re-matches #\"_|\\.\")]\n    (comp\n      (partition-by sep?)\n      (map (fn [cs]\n             (if (and (= (count cs) 1)\n                      (sep? (first cs)))\n               [:<> [:wbr] (first cs)]\n               (str/join cs)))))))\n\n(defn break-str\n  \"Annotate `s` with word break opportunities.\"\n  [s]\n  (into [:<>] break-str-xf s))\n\n(defn- metadata-table-val\n  \"Create a Hiccup representation for `v` based on `k` and the source `m`;\n  names are sourced via the `search-state`.\"\n  [{:keys [id->name id->type] :as search-state} m k v]\n  (let [into-ul (fn [coll]\n                  (into [:ul]\n                        (->> (sort-coll id->name coll)\n                             (map #(metadata-table-val search-state m k %))\n                             (map #(vector :li %)))))]\n    (cond\n      ;; Hiccup passes unchanged\n      (vector? v)\n      v\n\n      ;; Special behaviour.\n      (= k :document/facsimile)\n      (if (set? v)\n        (count v)\n        1)\n\n      (= k :document/bib-entry)\n      (let [href     (-> m :document/author sd/id->author bib-href)\n            fragment (-> m :document/year str legal-id)]\n        [:a {:href (str href \"#\" fragment)}\n         v])\n\n      ;; Individual entities caught here.\n      (and (string? v) (str/starts-with? v \"#\"))\n      [:a {:href  (search-href v)\n           :title \"View in the reader\"\n           :key   v}\n       (when-let [img-src (some-> v id->type sd/entity-types :img-src)]\n         [:img.entity-icon {:src img-src :alt \"\"}])\n       (get id->name v v)]\n\n      ;; Collections caught here.\n      (set? v)\n      (into [:dl]\n            (->> (group-coll id->type v)\n                 (sort-by key)\n                 (map (fn [[k coll]]\n                        [:<>\n                         [:dt k]\n                         [:dd (into-ul coll)]]))))\n\n      ;; :file/body?\n      (boolean? v)\n      (if v\n        [:em \"available\"]\n        [:span.weak \"n/a\"])\n\n      (inst? v)\n      (let [d   (.toISOString v)\n            ret (str/split d #\"T\")]\n        (if (coll? ret)\n          (first ret)\n          d))\n\n      :else\n      (str v))))\n\n(defn metadata-table\n  [search-state m kvs]\n  [:table.entity-metadata\n   [:tbody\n    (for [[k v] kvs]\n      [:tr {:key k}\n       [:td [:strong (str (get sd/rel->label k k))]]\n       [:td (metadata-table-val search-state m k v)]])]])\n\n(defn kvs-list\n  \"Generic display of title+content `kvs`; `val-com` renders the content.\"\n  [kvs val-com & [offset]]\n  [:dl.kvs-list {:ref #(find-fragment)}\n   (for [[k v :as kv] (add-backgrounds kvs offset)]\n     [:<> {:key k}\n      [:dt {:id    (legal-id k)\n            :style (:style (meta kv))}\n       k]\n      [:dd\n       [val-com v]]])])\n\n(defn- single\n  \"If `x` is a 'coll' return the first item; else return `x`.\"\n  [x]\n  (if (coll? x)\n    (first (sort x))\n    x))\n\n"]}