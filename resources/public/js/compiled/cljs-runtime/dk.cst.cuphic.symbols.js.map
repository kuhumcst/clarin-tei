{"version":3,"sources":["dk/cst/cuphic/symbols.cljc"],"mappings":";AAaA;;;iCAAA,AAAA,jCAAKA;AAIL;;;iCAAA,AAAA,jCAAKC;AAIL;;;iCAAA,AAAA,jCAAKC;AAIL;;;0CAAA,AAAA,1CAAKC;AAIL,6CAAA,7CAAOC,kGACJC,IAAIC;AADP,AAEE,OAACC,kCAAiB,AAACC,eAAKH,KAAKC;;AAE/B,wCAAA,xCAAMG,wFACHC;AADH,AAEE,OAACC,6CAAED,MAAMV;;AAEX,wCAAA,xCAAMY,wFACHF;AADH,AAEE,OAACC,6CAAED,MAAMT;;AAEX,wCAAA,xCAAMY,wFACHH;AADH,AAEE,kDAAA,zCAAK,kBAAAI,jBAASJ,0CACT,AAACK,cAAI,iBAAAC,eAAA,8EAAGhB,uEAASC,tGAASC,8DAASC;AAA9B,AAAA,QAAAa,6CAAAA,oDAAAA,TAAiDN,gCAAAA;WACtD,GAAK,iDAAA,jDAACN,2CAAeM;;AAE5B,iDAAA,jDAAMO,0GACHP;AADH,AAEE,kDAAA,zCAAK,kBAAAI,jBAASJ,0CACT,AAACK,cAAI,iBAAAG,eAAA,uFAAGjB,xCAASE;AAAZ,AAAA,QAAAe,6CAAAA,oDAAAA,TAA+BR,gCAAAA;WACpC,iDAAA,jDAACN,2CAAeM;;AAEvB,oCAAA,pCAAMS,gFACHT;AADH,AAEE,yBAAAI,jBAASJ;;AAEX,iDAAA,jDAAMU,0GACHV;AADH,AAEE,OAACC,6CAAED,MAAMP;;AAEX,iDAAA,jDAAMkB,0GACHX;AADH,AAEE,OAACC,6CAAED,MAAMR;;AAEX;;;wCAAA,xCAAMoB,wFAEHZ;AAFH,AAGE,SAAI,AAACW,+CAAmBX,YACpB,AAACU,+CAAmBV;;AAE1B,mDAAA,nDAAMa,8GACHb;AADH,AAEE,SAAK,AAACc,sBAAMd,YACP,AAACC,6CAAER,wCAAkB,AAACsB,gBAAMf;;AAEnC,mDAAA,nDAAMgB,8GACHhB;AADH,AAEE,SAAK,AAACc,sBAAMd,YACP,AAACC,6CAAET,+BAAS,AAACuB,gBAAMf;;AAE1B;;;0CAAA,1CAAMiB,4FAEHjB;AAFH,AAGE,SAAI,AAACgB,iDAAqBhB,YACtB,AAACa,iDAAqBb;;AAE5B;;;8CAAA,9CAAMkB,oGAEHlB;AAFH,AAGE,SAAI,AAACY,sCAAUZ,YACX,AAACiB,wCAAYjB;;AAEnB;;;;uDAAA,vDAAMmB,sHAGHnB;AAHH,AAIE,SAAI,AAACU,+CAAmBV,YACpB,AAACa,iDAAqBb;;AAE5B;;;yCAAA,zCAAMoB,0FAEHpB;AAFH,AAGE,2DAAA,oDAAA,tGAAI,AAACD,sCAAUC,cACX,AAACG,sCAAUH,cACX,AAACmB,qDAAyBnB,YAC1B,EAAK,AAACiB,wCAAYjB,YACb,AAACqB,uBAAOD,uCAAW,AAACE,eAAKtB;;AAEpC,kCAAA,lCAAMuB,4EACHvB;AADH,AAEE,GAAI,AAACc,sBAAMd;AACT,IAAAwB,cAAOG;IAAPF,cAAS,AAACV,gBAAMf;AAAhB,AAAA,oBAAA,CAAAwB,4CAAAA,yEAAAC,eAAAD,qDAAAC,nGACEjC,oEAAAA;AADF;;AAAA,oBAAA,CAAAgC,4CAAAA,kFAAAC,eAAAD,8DAAAC,rHAEEhC,6EAAAA;AAFF;;AAAA,MAAA,KAAAiC,MAAA,CAAA,mEAAAD;;;;AAGA,GACC,AAACvB,sCAAUF;AADZ;;AAAA,GAEC,AAACD,sCAAUC;AAFZ;;AAAA,GAGC,AAACU,+CAAmBV;AAHrB;;AAAA,GAIC,AAACW,+CAAmBX;AAJrB;;AAAA,GAKC,AAACO,+CAAmBP;AALrB;;AAAA,GAMC,AAACG,sCAAUH;AANZ;;AAAA","names":["dk.cst.cuphic.symbols/wildcard","dk.cst.cuphic.symbols/optional","dk.cst.cuphic.symbols/omission","dk.cst.cuphic.symbols/optional-omission","dk.cst.cuphic.symbols/prefixed-with?","sym","prefix","clojure.string/starts-with?","cljs.core/name","dk.cst.cuphic.symbols/wildcard?","pnode","cljs.core._EQ_","dk.cst.cuphic.symbols/optional?","dk.cst.cuphic.symbols/variable?","cljs.core/Symbol","cljs.core/not","fexpr__40989","dk.cst.cuphic.symbols/optional-variable?","fexpr__40993","dk.cst.cuphic.symbols/slot?","dk.cst.cuphic.symbols/optional-omission?","dk.cst.cuphic.symbols/definite-omission?","dk.cst.cuphic.symbols/omission?","dk.cst.cuphic.symbols/optional-repetition?","cljs.core/list?","cljs.core/first","dk.cst.cuphic.symbols/definite-repetition?","dk.cst.cuphic.symbols/repetition?","dk.cst.cuphic.symbols/quantification?","dk.cst.cuphic.symbols/optional-quantification?","dk.cst.cuphic.symbols/arbitrary?","cljs.core/every?","cljs.core/rest","dk.cst.cuphic.symbols/slot-type","pred__41035","expr__41036","js/Error","cljs.core/="],"sourcesContent":["(ns dk.cst.cuphic.symbols\n  \"These are the special symbols used in Cuphic:\n\n      ?      -  optional node (the slot can be filled by a node -OR- be empty)\n      _      -  wildcard (the slot can be filled by any 1 node)\n      ???    -  marks omission of 0 or more nodes\n      ...    -  marks omission of 1 or more nodes\n      (???)  -  marks repetition of 0 or more nodes (provided as fn args)\n      (...)  -  marks repetition of 1 or more nodes (provided as fn args)\n      var    -  variable (binds the corresponding node in the Hiccup to 'var')\n      ?var   -  optional variable, i.e. the slot can also be empty\"\n  (:require [clojure.string :as str]))\n\n(def wildcard\n  \"Marks a slot that can be filled by any 1 node.\"\n  '_)\n\n(def optional\n  \"Marks a slot that can be filled any 1 node -OR- be empty.\"\n  '?)\n\n(def omission\n  \"Marks omission of 1 or more nodes.\"\n  '...)\n\n(def optional-omission\n  \"Marks omission of 0 or more nodes.\"\n  '???)\n\n(defn- prefixed-with?\n  [sym prefix]\n  (str/starts-with? (name sym) prefix))\n\n(defn wildcard?\n  [pnode]\n  (= pnode wildcard))\n\n(defn optional?\n  [pnode]\n  (= pnode optional))\n\n(defn variable?\n  [pnode]\n  (and (symbol? pnode)\n       (not (#{wildcard optional omission optional-omission} pnode))\n       (not (prefixed-with? pnode \"?\"))))\n\n(defn optional-variable?\n  [pnode]\n  (and (symbol? pnode)\n       (not (#{optional optional-omission} pnode))\n       (prefixed-with? pnode \"?\")))\n\n(defn slot?\n  [pnode]\n  (symbol? pnode))\n\n(defn optional-omission?\n  [pnode]\n  (= pnode optional-omission))\n\n(defn definite-omission?\n  [pnode]\n  (= pnode omission))\n\n(defn omission?\n  \"Does this `pnode` mark omission?\"\n  [pnode]\n  (or (definite-omission? pnode)\n      (optional-omission? pnode)))\n\n(defn optional-repetition?\n  [pnode]\n  (and (list? pnode)\n       (= optional-omission (first pnode))))\n\n(defn definite-repetition?\n  [pnode]\n  (and (list? pnode)\n       (= omission (first pnode))))\n\n(defn repetition?\n  \"Does this `pnode` mark repetition?\"\n  [pnode]\n  (or (definite-repetition? pnode)\n      (optional-repetition? pnode)))\n\n(defn quantification?\n  \"Does this `pnode` mark omission or repetition?\"\n  [pnode]\n  (or (omission? pnode)\n      (repetition? pnode)))\n\n(defn optional-quantification?\n  \"Does this `pnode` allow for 0 cases? I.e. will the full pattern still be able\n  to be matched even if pnode is represented by 0 nodes?\"\n  [pnode]\n  (or (optional-omission? pnode)\n      (optional-repetition? pnode)))\n\n(defn arbitrary?\n  \"Will this `pnode` match nodes arbitrarily?\"\n  [pnode]\n  (or (wildcard? pnode)\n      (variable? pnode)\n      (optional-quantification? pnode)\n      (and (repetition? pnode)\n           (every? arbitrary? (rest pnode)))))\n\n(defn slot-type\n  [pnode]\n  (if (list? pnode)\n    (condp = (first pnode)\n      omission :definite-repetition\n      optional-omission :optional-repetition)\n    (cond\n     (optional? pnode) :optional\n     (wildcard? pnode) :wildcard\n     (optional-omission? pnode) :optional-omission\n     (definite-omission? pnode) :definite-omission\n     (optional-variable? pnode) :optional-variable\n     (variable? pnode) :variable)))\n"]}