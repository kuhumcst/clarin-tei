{"version":3,"sources":["dk/cst/stucco/dom/keyboard.cljs"],"mappings":";AAWA;;;2CAAA,3CAAOA,8FAEJC;AAFH,AAGE,IAAMC,OAAK,qBAAA,rBAAeD;AAA1B,AAEO,sDAAA,WAAAE,1DAACC;AAAD,AAAS,OAACC,6CAAEH,KAAK,AAAAC,8BAAA;GADjB,AAAY,AAAcF;;AAGnC;;;oDAAA,pDAAOK,gHAEJL;AAFH,AAGE,aAAA,TAAOgB;YAAP,RACOC;IADPX,WAE4B,AAACP,yCAAcC;IAF3CO,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;cAAAE,VAEQQ;eAFRV,XAEkBW;AAFlB,AAAA,IAAOH,aAAAA;IACAC,YAAAA;IADPX,eAAAA;;AAAA,AAAA,IAAOU,aAAAA;IACAC,YAAAA;IADPJ,aAAAP;IAAAQ,aAAA,AAAAL,cAAAI;IAAAE,eAAA,AAAAJ,gBAAAG;IAAAA,iBAAA,AAAAF,eAAAE;kBAAAC,dAEQG;mBAFRJ,fAEkBK;AAFlB,AAGE,GACE,gBAAA,fAAMD;AADR,0FACkBF,WAAOC;;AADzB,GAEE,AAACb,6CAAEJ,QAAQkB;AAAS,eAAOF;eAAP;eAAiBG;;;;;;AAFvC,oBAGEF;AAAM,eAAOD;eAAO,AAACI,6CAAKH,UAAMC;eAASC;;;;;;AAH3C,oBAIEH;AAAO,eAAO,AAACI,6CAAKJ,WAAOE;eAASD;eAAME;;;;;;AAJ5C;;;;;;;;AAOJ,sCAAA,iFAAA,gBAAA,vIAAKE;AAGL,mCAAA,iFAAA,pHAAKC;AAGL,gCAAA,iFAAA,eAAA,hIAAKC;AAGL,kCAAA,iFAAA,iBAAA,pIAAKC;AAGL,kCAAA,iFAAA,YAAA,/HAAKC;AAGL,mCAAA,iFAAA,kBAAA,tIAAKC;AAGL,AAAKC,uCACH,AAACC,gDAAUL,8BAAGE;AAEhB,AAAKI,uCACH,AAACD,gDAAUJ,gCAAKE;AAElB,AAAKI,wCACH,AAACF,gDAAUP,oCAASC;AAEtB,AAAKS,4CACH,AAACH,uDAAUD,qCAAUE,uFAAUC;AAEjC;;;;;;;;;;qDAAA,rDAAME,kHASHC;AATH,AAUE,oBAAM,CAACF,0EAAAA,iFAAAA,TAAe,AAAAE,6DAAA,AAAAA;AAAtB,AACE,AAAiBA;;AACjB,AAAkBA;;AAClB,IAAAC,aAAqB,AAAC7B,kDAAuB,AAAA4B;aAA7C,AAAAE,4CAAAD,WAAA,IAAA,pEAAOlB;YAAP,AAAAmB,4CAAAD,WAAA,IAAA,nEAAcjB;AAAd,AACE,IAAAmB,cAAOE;IAAPD,cAAiB,AAAAJ;AAAjB,AAAA,oBAAA,CAAAG,4CAAAA,gFAAAC,eAAAD,4DAAAC,jHACEP,2EAAAA;AAAW,AAIE,AAACS,sCAAe,AAAA,AAAAN;;AAChB,AAAQ,AAAAA;;AACR,OAAQ,AAAAA;;AAPvB,oBAAA,CAAAG,4CAAAA,+EAAAC,eAAAD,2DAAAC,/GAQEV,0EAAAA;AAAU,OAAQ,AAACa,eAAK,EAAI,AAACC,uBAAOzB,SACVC,MACAD;;AAV5B,oBAAA,CAAAoB,4CAAAA,+EAAAC,eAAAD,2DAAAC,/GAWER,0EAAAA;AAAU,OAAQ,AAAClB,gBAAM,EAAI,AAAC8B,uBAAOxB,QACVD,OACAC;;AAb7B;;;;;AAJJ","names":["dk.cst.stucco.dom.keyboard/role-siblings","element","role","p1__39626#","cljs.core.filter","cljs.core._EQ_","dk.cst.stucco.dom.keyboard/adjacent-role-siblings","G__39631","vec__39632","seq__39633","cljs.core/seq","first__39634","cljs.core/first","cljs.core/next","vec__39638","seq__39639","first__39640","before","after","sibling","siblings","cljs.core.conj","dk.cst.stucco.dom.keyboard/spacebar","dk.cst.stucco.dom.keyboard/enter","dk.cst.stucco.dom.keyboard/up","dk.cst.stucco.dom.keyboard/down","dk.cst.stucco.dom.keyboard/left","dk.cst.stucco.dom.keyboard/right","dk.cst.stucco.dom.keyboard/prev-item","clojure.set.union","dk.cst.stucco.dom.keyboard/next-item","dk.cst.stucco.dom.keyboard/click-item","dk.cst.stucco.dom.keyboard/supported-keys","dk.cst.stucco.dom.keyboard/roving-tabindex-handler","e","vec__39641","cljs.core.nth","pred__39644","expr__39645","cljs.core/contains?","dk.cst.stucco.dom.focus/request!","cljs.core/last","cljs.core/empty?"],"sourcesContent":["(ns dk.cst.stucco.dom.keyboard\n  \"Helpers for ARIA-compliant keyboard navigation.\n\n  ARIA reference:\n    https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard\"\n  (:require [clojure.set :as set]\n            [dk.cst.stucco.dom.focus :as focus]))\n\n;; https://javascript.info/bubbling-and-capturing\n;; https://www.mutuallyhuman.com/blog/keydown-is-the-only-keyboard-event-we-need/\n\n(defn- role-siblings\n  \"Get siblings for an `element` (including itself) with the same ARIA role.\"\n  [element]\n  (let [role (.getAttribute element \"role\")]\n    (->> (.-children (.-parentNode element))\n         (filter #(= role (.getAttribute % \"role\"))))))\n\n(defn- adjacent-role-siblings\n  \"Get adjacent role siblings for an `element` as [before after].\"\n  [element]\n  (loop [before []\n         after  nil\n         [sibling & siblings] (role-siblings element)]\n    (cond\n      (nil? sibling) [before after]\n      (= element sibling) (recur before [] siblings)\n      after (recur before (conj after sibling) siblings)\n      before (recur (conj before sibling) after siblings))))\n\n;; https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n(def spacebar\n  #{\" \" \"Spacebar\"})\n\n(def enter\n  #{\"Enter\"})\n\n(def up\n  #{\"ArrowUp\" \"Up\"})\n\n(def down\n  #{\"ArrowDown\" \"Down\"})\n\n(def left\n  #{\"ArrowLeft\" \"Left\"})\n\n(def right\n  #{\"ArrowRight\" \"Right\"})\n\n(def prev-item\n  (set/union up left))\n\n(def next-item\n  (set/union down right))\n\n(def click-item\n  (set/union spacebar enter))\n\n(def supported-keys\n  (set/union prev-item next-item click-item))\n\n(defn roving-tabindex-handler\n  \"OnKeyDown handler with keyboard functionality needed for a roving tabindex.\n  Focus moves between adjacent DOM siblings with the same ARIA role.\n\n  Requires :on-click and :role to have been set on the affected elements.\n  The elements should also update their :tab-index attribute reactively.\n\n  ARIA references:\n    https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_within\"\n  [e]\n  (when (supported-keys e.key)\n    (.preventDefault e)\n    (.stopPropagation e)\n    (let [[before after] (adjacent-role-siblings e.target)]\n      (condp contains? e.key\n        click-item (do\n                     ;; Focus is both set directly and requested asynchronously.\n                     ;; Which method is effective is determined by whether the\n                     ;; element has to be re-rendered (async) or not (direct).\n                     (focus/request! e.target.id)\n                     (.click e.target)\n                     (.focus e.target))\n        prev-item (.focus (last (if (empty? before)\n                                  after\n                                  before)))\n        next-item (.focus (first (if (empty? after)\n                                   before\n                                   after)))\n        :no-op))))\n"]}