{"version":3,"sources":["rescope/core.cljs"],"mappings":"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","names":["rescope.core/hiccup->custom-tags","hiccup","rescope.select/all","cljs.core.map","cljs.core/first","cljs.core.filter","cljs.core/keyword?","cljs.core.comp","clojure.string/lower-case","cljs.core/name","rescope.util/valid-custom-tag?","cljs.core/set","rescope.core/define-elements!","tags","seq__45151","cljs.core/seq","chunk__45152","count__45153","i__45154","temp__5804__auto__","cljs.core/chunked-seq?","c__5567__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","tag","rescope.interop/define-element!","rescope.core/shadow-ref","comp","this","reagent.dom.render","rescope.core/shadow-wrapper","old-node","new-node","cljs.core.vary_meta","cljs.core/assoc","cljs.core/constantly","var_args","args__5774__auto__","len__5768__auto__","i__5769__auto__","argseq__5775__auto__","cljs.core/IndexedSeq","rescope.core/scope","p__45169","vec__45170","cljs.core.nth","seq45164","G__45165","self__5753__auto__","css","vec__45173","vec__45176","attr","children","cljs.core/map?","cljs.core/second","cljs.core/split-at","style","_","cljs.core.into","cljs.core.assoc"],"sourcesContent":["(ns rescope.core\n  \"Reagent components for integrating with the shadow DOM.\"\n  (:require [clojure.string :as str]\n            [reagent.dom :as rdom]\n            [rescope.util :as util]\n            [rescope.interop :as interop]\n            [rescope.select :as select]))\n\n(defn hiccup->custom-tags\n  \"Get a set of all custom tags (as strings) found in a `hiccup` tree.\"\n  [hiccup]\n  (->> (select/all hiccup)\n       (map first)\n       (filter keyword?)\n       (map (comp str/lower-case name))\n       (filter util/valid-custom-tag?)\n       (set)))\n\n(defn define-elements!\n  \"Define custom HTML elements covering all `tags`.\"\n  [tags]\n  (doseq [tag tags]\n    (interop/define-element! tag)))\n\n(defn shadow-ref\n  \"Get a :ref fn for a DOM element to render a given `comp` as its shadow root.\n  The component should accept a single argument: the element's DOM reference.\"\n  [comp]\n  (fn [^js/Element this]\n    (when this\n      ;; TODO: this extra check was suddenly necessary - investigate\n      (when (undefined? (.-shadow this))\n        (set! (.-shadow this) (.attachShadow this #js{:mode \"open\"})))\n      (rdom/render [comp this] (.-shadow this)))))\n\n(defn shadow-wrapper\n  [old-node new-node]\n  (vary-meta old-node assoc :ref (shadow-ref (constantly new-node))))\n\n(defn scope\n  \"Render `hiccup` inside a shadow DOM with the root element as the shadow host.\n  Optionally takes scoped `css` to apply to the content inside the shadow DOM.\n  The `css` can be a string or hiccup, e.g. [:style], [:link], [:template].\"\n  ([hiccup & [css]]\n   (define-elements! (hiccup->custom-tags hiccup))\n   (let [[[tag attr] children] (if (map? (second hiccup))\n                                 (split-at 2 hiccup)\n                                 (split-at 1 hiccup))\n         style (if (string? css) [:style css] css)\n         comp  (fn [_] (into [:<> style] children))]\n     [tag (assoc attr :ref (shadow-ref comp))])))\n"]}