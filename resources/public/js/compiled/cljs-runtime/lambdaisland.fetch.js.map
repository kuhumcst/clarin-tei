{"version":3,"sources":["lambdaisland/fetch.cljs"],"mappings":"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","names":["lambdaisland.fetch/content-types","lambdaisland.fetch/transit-json-writer","cljs.core/Delay","cognitect.transit.writer","lambdaisland.fetch/transit-json-reader","cognitect.transit.reader","js/lambdaisland","js/lambdaisland.fetch","js/lambdaisland.fetch.encode-body","method-table__5641__auto__","cljs.core.atom","prefer-table__5642__auto__","method-cache__5643__auto__","cached-hierarchy__5644__auto__","hierarchy__5645__auto__","cljs.core.get","fexpr__45234","cljs.core/MultiFn","cljs.core.symbol","lambdaisland.fetch/encode-body","content-type","body","opts","_","cognitect.transit/write","cljs.core/deref","lambdaisland.uri/map->query-string","js/JSON.stringify","cljs.core/clj->js","js/lambdaisland.fetch.decode-body","fexpr__45237","lambdaisland.fetch/decode-body","bodyp","response","obj__40642__auto__","f__40643__auto__","kitchen-async.promise/->promise","kitchen_async.promise.then","e__40824__auto__","e45241","kitchen-async.promise/reject","text","decoded","cognitect.transit/read","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWithMeta","cljs.core.vary_meta","cljs.core/assoc","p__45250","map__45251","cljs.core/--destructure-map","lambdaisland.fetch/fetch-opts","method","accept","headers","redirect","mode","cache","credentials","referrer-policy","fetch-headers","seq__45254","cljs.core/seq","chunk__45255","count__45256","i__45257","vec__45289","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__5567__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__45297","cljs.core/first","cljs.core/next","k","v","obj45292","obj45293","applied-science.js-interop.impl/wrap-key","obj45301","obj45304","clojure.string/upper-case","cljs.core/name","var_args","args__5774__auto__","len__5768__auto__","i__5769__auto__","argseq__5775__auto__","cljs.core/IndexedSeq","lambdaisland.fetch/request","p__45317","vec__45319","map__45322","seq45309","G__45310","self__5753__auto__","url","query-params","lambdaisland.uri/uri","cljs.core.assoc","request","G__45327","obj45329","obj45330","e45333","js/fetch","kitchen-async.promise/catch*","e45362","err45358","obj45365","k45366","obj45369","applied-science.js-interop.impl/in?*","js/undefined","header-map","cljs.core.into","cljs.core.map","cljs.core/vec","cljs.core/es6-iterator-seq","content-type-header","clojure.set/map-invert","clojure.string/replace","e45376","obj45386","obj45387","obj45378","k45379","obj45382","e","obj45395","obj45396","lambdaisland.fetch/get","lambdaisland.fetch/post","p__45426","vec__45429","seq45417","G__45418","lambdaisland.fetch.request","lambdaisland.fetch/put","p__45454","vec__45457","seq45443","G__45444","lambdaisland.fetch/delete","p__45463","vec__45466","seq45461","G__45462","lambdaisland.fetch/head","p__45478","vec__45479","seq45472","G__45473"],"sourcesContent":["(ns lambdaisland.fetch\n  (:refer-clojure :exclude [get])\n  (:require [applied-science.js-interop :as j]\n            [clojure.core :as c]\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [cognitect.transit :as transit]\n            [kitchen-async.promise :as p]\n            [lambdaisland.uri :as uri]\n            [lambdaisland.uri.normalize :as uri-normalize]))\n\n;; fetch(url, {\n;;             method: 'POST', // *GET, POST, PUT, DELETE, etc.\n;;             mode: 'cors', // no-cors, *cors, same-origin\n;;             cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n;;             credentials: 'same-origin', // include, *same-origin, omit\n;;             headers: {\n;;                       'Content-Type': 'application/json'\n;;                       // 'Content-Type': 'application/x-www-form-urlencoded',\n;;                       },\n;;             redirect: 'follow', // manual, *follow, error\n;;             referrerPolicy: 'no-referrer', // no-referrer, *client\n;;             body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n;;             });\n\n(def content-types\n  {:transit-json \"application/transit+json\"\n   :json         \"application/json\"\n   :form-encoded \"application/x-www-form-urlencoded\"\n   :text         \"text/plain\"\n   :html         \"text/html\"\n   :edn          \"application/edn\"})\n\n(def transit-json-writer\n  (delay (transit/writer :json)))\n\n(def transit-json-reader\n  (delay (transit/reader :json)))\n\n(defmulti encode-body (fn [content-type body opts] content-type))\n\n(defmethod encode-body :default [_ body opts]\n  body)\n\n(defmethod encode-body :transit-json [_ body opts]\n  (transit/write (:transit-json-writer opts @transit-json-writer) body))\n\n(defmethod encode-body :form-encoded [_ body opts]\n  (uri/map->query-string body))\n\n(defmethod encode-body :json [_ body opts]\n  (js/JSON.stringify (clj->js body)))\n\n(defmulti decode-body (fn [content-type bodyp opts] content-type))\n\n(defmethod decode-body :default [_ response opts]\n  (j/call response :text))\n\n(defmethod decode-body :transit-json [_ response opts]\n  (p/let [text (j/call response :text)]\n    (let [decoded (transit/read (:transit-json-reader opts @transit-json-reader) text)]\n      (if (satisfies? IWithMeta decoded)\n        (vary-meta decoded assoc ::raw text)\n        decoded))))\n\n(defmethod decode-body :json [_ response opts]\n  (j/call response :json))\n\n(defn fetch-opts [{:keys [method accept content-type\n                          headers redirect mode cache\n                          credentials referrer-policy]\n                   :or   {method          :get\n                          accept          :transit-json\n                          content-type    :transit-json\n                          redirect        :follow\n                          mode            :cors\n                          cache           :default\n                          credentials     :same-origin\n                          referrer-policy :client}}]\n  (let [fetch-headers #js {\"Accept\"       (c/get content-types accept)\n                           \"Content-Type\" (c/get content-types content-type)}]\n    (doseq [[k v] headers]\n      (j/assoc! fetch-headers k v))\n    #js {:method          (str/upper-case (name method))\n         :headers         fetch-headers\n         :redirect        (name redirect)\n         :mode            (name mode)\n         :cache           (name cache)\n         :credentials     (name credentials)\n         :referrer-policy (name referrer-policy)}))\n\n(defn request [url & [{:keys [method accept content-type query-params body]\n                       :as   opts\n                       :or   {accept       :transit-json\n                              content-type :transit-json}}]]\n  (let [url     (-> url\n                    uri/uri\n                    (assoc :query (uri/map->query-string query-params))\n                    str)\n        request (cond-> (fetch-opts opts)\n                  body\n                  (j/assoc! :body (if (string? body)\n                                    body\n                                    (encode-body content-type body opts))))]\n    (p/let [response (js/fetch url request)]\n      (p/try\n        (let [headers             (j/get response :headers)\n              header-map          (into {} (map vec) (es6-iterator-seq (j/call headers :entries)))\n              content-type-header (j/call headers :get \"Content-Type\")\n              content-type        (when content-type-header\n                                    (c/get (set/map-invert content-types)\n                                           (str/replace content-type-header #\";.*\" \"\")))]\n          (p/let [body (decode-body content-type response opts)]\n            ^{::request  (j/assoc! request :url url)\n              ::response response}\n            {:status  (j/get response :status)\n             :headers header-map\n             :body    body}))\n        (p/catch :default e\n          ^{::request  (j/assoc! request :url url)\n            ::response response}\n          {:error e})))))\n\n(def get request)\n\n(defn post [url & [opts]]\n  (request url (assoc opts :method :post)))\n\n(defn put [url & [opts]]\n  (request url (assoc opts :method :put)))\n\n(defn delete [url & [opts]]\n  (request url (assoc opts :method :delete)))\n\n(defn head [url & [opts]]\n  (request url (assoc opts :method :head)))\n\n\n(comment\n  (p/let [result (get \"/as400/paginated/VSBSTAMDTA.STOVKP\"\n                      {:query-params {:page 1\n                                      :page-size 20}})]\n    (def xxx result))\n\n  (p/let [body (:body xxx)]\n    (def body body))\n\n  (p/let [res (head \"/as400/paginated/VSBSTAMDTA.STOVKP\")]\n    (def xxx res)))\n"]}