{"version":3,"sources":["dk/cst/glossematics/frontend/state.cljs"],"mappings":";AAOA,GAAA,QAAAA,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAAC;AAAA;AAAA,AAAA,AAASC,wDACP,qDAAA,yBAAA,5EAAM,QAAAC,2CACJA;;AAGJ,GAAA,QAAAP,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAAI;AAAA;AAAA,AAAA,AAASC,gDACP,iHAAA,/GAAI,QAAAC,iCACF,AAACC,sDAAgBD;;AAGrB,GAAA,QAAAV,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAAQ;AAAA;AAAA,AAAA,AAASC,2CACP,uGAAA,rGAAI,QAAAC,4BACF,AAACH,sDAAgBG;;AAGrB,GAAA,QAAAd,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAAW;AAAA;AAAA,AAAA,AAASC,0DACP,AAACC,gDACC,kBAAA,iBAAAC,eAAA,iBAAAC,mBAAA,AAAAC,sCAAoBX;AAApB,AAAA,oBAAAU;AAAAA;;AAAA,OAAAE,gDAAA;;;AAAA,AAAA,QAAAH,6CAAAA,4FAAAA,jDAAoBT,wEAAAA;MAApB,KAAA;;AAMJ,AAEA;;;sDAAA,iFAAA,wDAAA,mDAAA,sEAAA,2EAAA,nYAAKa;AAIL;;;;;2DAAA,iFAAA,6DAAA,6DAAA,0DAAA,kEAAA,lYAAKC;AAML,oDAAA,wCAAA,mDAAA,wDAAA,wDAAA,wDAAA,8CAAA,qDAAA,6DAAA,uDAAA,kDAAA,kDAAA,AAAA,oDAAA,kCAAA,KAAA,IAAA,IAAA,KAAA,mFAAA,KAAA,0DAAA,iCAAA,GAAA,h5BAAKC;AAYL,GAAA,QAAAxB,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAAqB;AAAA;AAAA,AAAA,AAASC,wCACP,gDAAA,2CAAA,wDAAA,KAAA,yDAAA,2CAAA,5PAACT,oTACwBO;;AAE3B,GAAA,QAAAxB,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAAuB;AAAA;AAAA,AAAA,AAASC,8CACP,0DAAA,mFAAA,7IAACC,oBAASH;;AAEZ,GAAA,QAAA1B,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAA0B;AAAA;AAAA,AAAA,AAASC,8CACP,0DAAA,mFAAA,7IAACF,oBAASH;;AAEZ,GAAA,QAAA1B,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAA4B;AAAA;AAAA,AAAA,AAASC,4CACP,0DAAA,mFAAA,yDAAA,tMAACJ,oBAASH;;AAEZ,GAAA,QAAA1B,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAA8B;AAAA;AAAA,AAAA,AAASC,2CACP,0DAAA,mFAAA,yDAAA,tMAACN,oBAASH;;AAEZ,GAAA,QAAA1B,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAAgC;AAAA;AAAA,AAAA,AAASC,kDACP,0DAAA,mFAAA,7IAACR,oBAASH;;AAEZ,GAAA,QAAA1B,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAAkC;AAAA;AAAA,AAAA,AAASC,4CACP,0DAAA,mFAAA,7IAACV,oBAASH;;AAEZ,GAAA,QAAA1B,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAAoC;AAAA;AAAA,AAAA,AAASC,mDACP,uGAAA,2CAAA,gDAAA,gDAAA,6DAAA,/SAACC,6DAASH;;AAGZ,GAAA,QAAAvC,+BAAAC,mCAAAC,gDAAAC,yDAAAC,+DAAAuC;AAAA;AAAA,AAAA,AAASC,kDACP,uGAAA,2CAAA,gDAAA,gDAAA,2DAAA,7SAACF,6DAASH","names":["js/dk","js/dk.cst","js/dk.cst.glossematics","js/dk.cst.glossematics.frontend","js/dk.cst.glossematics.frontend.state","js/dk.cst.glossematics.frontend.state.development?","dk.cst.glossematics.frontend.state/development?","js/inDevelopmentEnvironment","js/dk.cst.glossematics.frontend.state.assertions","dk.cst.glossematics.frontend.state/assertions","js/SAMLAssertions","clojure.edn.read_string","js/dk.cst.glossematics.frontend.state.paths","dk.cst.glossematics.frontend.state/paths","js/SAMLPaths","js/dk.cst.glossematics.frontend.state.authenticated?","dk.cst.glossematics.frontend.state/authenticated?","reagent.core.atom","fexpr__39749","or__5045__auto__","dk.cst.pedestal.sp.auth/auth-override","dk.cst.pedestal.sp.auth/condition->auth-test","dk.cst.glossematics.frontend.state/local-query-keys","dk.cst.glossematics.frontend.state/query-result-set-keys","dk.cst.glossematics.frontend.state/query-defaults","js/dk.cst.glossematics.frontend.state.db","dk.cst.glossematics.frontend.state/db","js/dk.cst.glossematics.frontend.state.location","dk.cst.glossematics.frontend.state/location","reagent.core/cursor","js/dk.cst.glossematics.frontend.state.timeline","dk.cst.glossematics.frontend.state/timeline","js/dk.cst.glossematics.frontend.state.search","dk.cst.glossematics.frontend.state/search","js/dk.cst.glossematics.frontend.state.query","dk.cst.glossematics.frontend.state/query","js/dk.cst.glossematics.frontend.state.bibliography","dk.cst.glossematics.frontend.state/bibliography","js/dk.cst.glossematics.frontend.state.reader","dk.cst.glossematics.frontend.state/reader","js/dk.cst.glossematics.frontend.state.facs-carousel","dk.cst.glossematics.frontend.state/facs-carousel","dk.cst.stucco.util.state.ghost","js/dk.cst.glossematics.frontend.state.tei-carousel","dk.cst.glossematics.frontend.state/tei-carousel"],"sourcesContent":["(ns dk.cst.glossematics.frontend.state\n  \"Contains both static and dynamic frontend state.\"\n  (:require [reagent.core :as r]\n            [clojure.edn :as edn]\n            [dk.cst.stucco.util.state :as su]\n            [dk.cst.pedestal.sp.auth :as sp.auth]))\n\n(defonce development?\n  (when (exists? js/inDevelopmentEnvironment)\n    js/inDevelopmentEnvironment))\n\n;; Loading assertions and saml-paths by passing an EDN string in index.html\n(defonce assertions\n  (if (exists? js/SAMLAssertions)\n    (edn/read-string js/SAMLAssertions)\n    {}))\n\n(defonce paths\n  (if (exists? js/SAMLPaths)\n    (edn/read-string js/SAMLPaths)\n    {}))\n\n(defonce authenticated?\n  (r/atom\n    (sp.auth/if-permit [assertions :authenticated]\n      true\n      false)))\n\n;; To avoid having multiple modals in succession after multiple bad API fetches,\n;; additional modals will be blocked until the route changes.\n(def ^:dynamic *block-modal-dialogs*)\n\n(def local-query-keys\n  \"Keys used locally by the search page; not transferable via query-params.\"\n  #{:rel :in :n :bad-input? :not-allowed?})\n\n(def query-result-set-keys\n  \"Keys that only affect the size/order of the query result set.\n\n  NOTE: same keys are used for both the query state and the query-params.\"\n  #{:limit :offset :order-by :from :to})\n\n(def query-defaults\n  {:unique   #{} :items []                                  ; = an ordered set\n   :n        0                                              ; background index\n   :in       \"\"                                             ; input text\n   :rel      '_                                             ; current relation\n   :limit    10\n   :offset   0\n   :order-by [nil :asc]\n   :from     nil\n   :to       nil})\n\n;; Local page data should all be cursors into this central data structure.\n(defonce db\n  (r/atom {:reader nil\n           :search {:query query-defaults}}))\n\n(defonce location\n  (r/cursor db [:location]))\n\n(defonce timeline\n  (r/cursor db [:timeline]))\n\n(defonce search\n  (r/cursor db [:search :meta]))\n\n(defonce query\n  (r/cursor db [:search :query]))\n\n(defonce bibliography\n  (r/cursor db [:bibliography]))\n\n(defonce reader\n  (r/cursor db [:reader]))\n\n(defonce facs-carousel\n  (su/ghost reader {:i        :i\n                    :facs-kvs :kvs}))\n\n(defonce tei-carousel\n  (su/ghost reader {:i       :i\n                    :tei-kvs :kvs}))\n"]}